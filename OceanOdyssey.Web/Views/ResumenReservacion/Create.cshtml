@model OceanOdyssey.Application.DTOs.ResumenReservacionDTO
@using System.Security.Claims

@{
    ViewData["Title"] = "Create";
}
<div class="container-fluid mt-4">
    <p class="fs-3">Tipo de cambio Hoy ₡ @ViewBag.ListCambio.venta</p>
    <div class="row">
        <!-- Columna Izquierda - Crear Reserva -->
        <div class="col-md-8">
            <form asp-action="Create">
                
                <!-- Crucero -->
                <div class="card shadow-sm mb-4">
                    <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                        <h4 class="mb-0">Crucero</h4>
                        <button class="btn btn-sm btn-light" type="button" data-bs-toggle="collapse" data-bs-target="#collapseCrucero">Mostrar / Ocultar</button>
                    </div>
                    <div id="collapseCrucero" class="collapse show card-body">
                        <div class="form-group mb-3">
                            <label asp-for="Idcrucero" class="control-label fw-bold"></label>
                            @Html.DropDownListFor(m => m.Idcrucero,
                                     new SelectList(ViewBag.ListCruceros, "Id", "Nombre"),
                                     new { @class = "form-select", id = "selectCrucero" })
                            <span asp-validation-for="Idcrucero" class="text-danger"></span>
                        </div>
                        <div class="mb-3">
                            <label asp-for="FechaCrucero" class="form-label">Seleccionar Fecha</label>
                            <select asp-for="FechaCrucero" class="form-control" id="selectFecha">
                                <option value="">Seleccione una fecha</option>
                            </select>
                        </div>
                    </div>
                </div>

              
                <!-- Habitaciones -->
                <div class="card shadow-sm mb-4">
                    <div class="card-header bg-info text-white d-flex justify-content-between align-items-center">
                        <h4 class="mb-0">Habitaciones</h4>
                        <button class="btn btn-sm btn-light" type="button" data-bs-toggle="collapse" data-bs-target="#collapseHabitaciones">Mostrar / Ocultar</button>
                    </div>
                    <div id="collapseHabitaciones" class="collapse show card-body">
                        <!-- Campo Cantidad de Habitaciones -->
                        <div class="row mb-3">
                            <div class="col-12">
                                <label for="cantidadHabitaciones" class="form-label">Cantidad de Habitaciones a reservar</label>
                                <input type="number" class="form-control" id="cantidadHabitaciones" name="cantidadHabitaciones" min="1" placeholder="Ingrese la cantidad">
                            </div>
                        </div>

                        <!-- Selector y botón para agregar habitación -->
                        <div class="row mb-3">
                            <div class="col-8">
                                <select id="selectHabitacion" class="form-select">
                                    <option value="" disabled selected>Cargando habitaciones...</option>
                                </select>
                            </div>
                            <div class="col-4">
                                <button type="button" class="btn btn-primary w-100" onclick="agregarHabitacion()">Agregar</button>
                            </div>
                        </div>

                        <!-- Contenedor de tarjetas de habitaciones -->
                        <div id="cardContainer" class="d-flex flex-wrap justify-content-center p-3"></div>
                    </div>
                </div>


                <!-- Complementos -->
                <div class="card shadow-sm mb-4">
                    <div class="card-header bg-danger text-white d-flex justify-content-between align-items-center">
                        <h4 class="mb-0">Complementos</h4>
                        <button class="btn btn-sm btn-light" type="button" data-bs-toggle="collapse" data-bs-target="#collapseComplementos">Mostrar / Ocultar</button>
                    </div>
                    <div id="collapseComplementos" class="collapse show card-body">
                        <div class="d-flex align-items-center">
                            <select id="selectComplemento" class="form-select me-2">
                                <option value="">Seleccione un complemento</option>
                                @foreach (var complemento in ViewBag.ListComplementos)
                                {
                                    <option value="@complemento.Id" data-detalle="@complemento.Detalle" data-precio="@complemento.Precio">
                                        @complemento.Nombre
                                    </option>
                                }
                            </select>
                            <button type="button" class="btn btn-light btn-sm" onclick="agregarComplemento()">Agregar</button>
                        </div>
                        <table class="table table-bordered d-none" id="tablaComplementos">
                            <thead class="table-light">
                                <tr>
                                    <th>ID</th>
                                    <th>Nombre</th>
                                    <th>Detalle</th>
                                    <th>Precio</th>
                                    <th>Cantidad</th>
                                    <th>Subtotal</th>
                                    <th>Acción</th>
                                </tr>
                            </thead>
                            <tbody></tbody>
                        </table>
                    </div>
                </div>


                <div class="container mt-4">
                    

                  

                    <!-- Sección de Confirmar o Cancelar -->
                    <div class="text-center mt-4">
                        
                        <button id="mostrar" type="button" class="btn btn-primary btn-lg">Confirmar Reservacion</button>

                      


                        <a asp-action="Index" class="btn btn-secondary btn-lg">Cancelar</a>
                    </div>
                </div>
             


                 
                <div id="pagoReserva" class="container mt-4 d-none">
                    <h3 class="text-center">Pagar Reservación</h3>

                    <!-- Mostrar información del usuario -->
                    <div class="text-center mb-4">
                        <p class="mb-0"><strong>Nombre:</strong> @User.Identity?.Name</p>
                        <p><strong>Email:</strong> @User.FindFirst(ClaimTypes.Email)?.Value</p>

                    </div>

                    <div class="mb-4">
                        <label asp-for="Estado" class="control-label fw-bold"></label>
                        <div class="form-check">
                            <label for="pagoTotal" class="form-check-label">
                                <input type="radio" name="pagoOpcion" id="pagoTotal" value="total" class="form-check-input" data-estado="Pagado">
                                Pagar el saldo total: <span id="totalReservaPago">0</span>
                            </label>
                        </div>
                    </div>

                    <div class="mb-4">
                        <label asp-for="Estado" class="control-label fw-bold"></label>
                        <div class="form-check">
                            <label for="pagoMinimo" class="form-check-label">
                                <input type="radio" name="pagoOpcion" id="pagoMinimo" value="minimo" class="form-check-input" data-estado="Pendiente Pago">
                                Pagar el depósito mínimo por huésped
                            </label>
                        </div>
                    </div>

                    <div class="mb-4">
                        <label asp-for="Estado" class="control-label fw-bold"></label>
                        <div class="form-check">
                            <label for="pagoTarjeta" class="form-check-label">
                                <input type="radio" name="pagoOpcion" id="pagoTarjeta" value="tarjeta" class="form-check-input" data-estado="Pagado">
                                Pagar con tarjeta de crédito
                            </label>
                        </div>
                    </div>

                    <input type="hidden" asp-for="Estado" id="estadoPago" />


                    <div id="pagoMinimoCampos" class="d-none mt-3">
                        <div class="form-group">
                            <h5 id="fechaLimiteTitulo" class="text-primary mb-3">
                                Fecha límite de pago: <span id="fechaLimitePago">--/--/----</span>
                            </h5>
                            <div class="form-group mt-2">
                                <label for="totalApagar">Total a pagar:</label>
                                <input type="text" id="totalPagarReserva" class="form-control" readonly>
                            </div>
                            <label for="montoPagoMinimo">Monto a pagar ahora:</label>
                            <input type="number" id="montoPagoMinimo" class="form-control" min="0">
                        </div>
                        <div class="form-group mt-2">
                            <label for="pendientePago">Pendiente por pagar:</label>
                            <input type="text" id="pendientePago" class="form-control" readonly>
                        </div>
                    </div>



                    <div id="tarjetaCreditoDatos" class="d-none">
                        <h5>Datos de la Tarjeta de Crédito</h5>

                        <div class="mb-3">
                            <label for="numeroTarjeta" class="form-label">Número de Tarjeta (16 dígitos)</label>
                            <input type="text" class="form-control" id="numeroTarjeta" maxlength="16" required>
                            <div class="invalid-feedback" id="numeroTarjetaError">
                                El número de tarjeta debe tener 16 dígitos.
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="fechaCaducidad" class="form-label">Fecha de Caducidad</label>
                            <input type="text" class="form-control" id="fechaCaducidad" placeholder="MM/AAAA" required>
                            <div class="invalid-feedback" id="fechaCaducidadError">
                                La fecha de caducidad debe estar en el formato MM/AAAA y no puede ser anterior al mes actual.
                            </div>
                        </div>

                        <div class="mb-3">
                            <label for="cvv" class="form-label">Código CVV</label>
                            <input type="text" class="form-control" id="cvv" maxlength="3" required>
                            <div class="invalid-feedback" id="cvvError">
                                El código CVV debe tener 3 dígitos.
                            </div>
                        </div>

                        <div class="mb-3">
                            <label for="titularTarjeta" class="form-label">Nombre del Titular</label>
                            <input type="text" class="form-control" id="titularTarjeta" required>
                            <div class="invalid-feedback" id="titularTarjetaError">
                                El nombre del titular debe tener al menos 10 caracteres.
                            </div>
                        </div>
                    </div>

                    <button type="submit" class="btn btn-primary w-100 mt-3 p-2" id="confirmarPagoButton">Confirmar Pago</button>



                
                </div>


            </form>
        </div>

 
        


        <!-- Columna Derecha - Resumen de Reserva -->
        <div class="col-md-4">
            <div id="resumenReservaContainer" class="card shadow-sm sticky-top">
                <div class="card-header bg-dark text-white">
                    <h4 class="mb-0">Resumen de Reserva</h4>
                </div>
                <div class="card-body" id="resumenReserva">
                    <!-- Detalle del Crucero -->
                    <div id="detalleCrucero" class="mb-4">
                        <h5 class="text-primary">Detalle del Crucero</h5>
                        <dl class="row">
                            <dt class="col-sm-5">Crucero:</dt>
                            <dd class="col-sm-7" id="nombreCrucero">-</dd>
                            <dt class="col-sm-5">Salida:</dt>
                            <dd class="col-sm-7" id="puertoSalida">-</dd>
                            <dt class="col-sm-5">Regreso:</dt>
                            <dd class="col-sm-7" id="puertoRegreso">-</dd>
                            <dt class="col-sm-5">Inicio:</dt>
                            <dd class="col-sm-7" id="fechaInicio">-</dd>
                            <dt class="col-sm-5">Fin:</dt>
                            <dd class="col-sm-7" id="fechaFin">-</dd>
                        </dl>
                    </div>

                    <!-- Habitaciones -->
                    <div id="detalleHabitaciones" class="mb-4">
                        <h5 class="text-primary">Habitaciones y Pasajeros</h5>
                        <table class="table table-bordered table-striped">
                            <thead class="table-dark">
                                <tr>
                                    <th>Habitación</th>
                                    <th>Pasajeros</th>
                                </tr>
                            </thead>
                            <tbody id="tablaHabitaciones"></tbody>
                        </table>
                    </div>

                    <!-- Complementos -->
                    <div id="detalleComplementos" class="mb-4">
                        <h5 class="text-primary">Complementos</h5>
                        <table class="table table-bordered table-striped">
                            <thead class="table-dark">
                                <tr>
                                    <th>Complemento</th>
                                    <th>Precio Final</th>
                                </tr>
                            </thead>
                            <tbody id="tablaComplementos"></tbody>
                        </table>
                    </div>

                    <!-- Totales -->
                    <div id="detalleTotales" class="mb-4">
                        <h5 class="text-primary">Totales</h5>
                        <dl class="row">
                            <dt class="col-sm-6">Total Habitaciones:</dt>
                            <dd class="col-sm-6" id="totalHabitaciones">0</dd>
                            <dt class="col-sm-6">Total Complementos:</dt>
                            <dd class="col-sm-6" id="totalComplementos">0</dd>
                            <dt class="col-sm-6">Subtotal:</dt>
                            <dd class="col-sm-6" id="subtotal">0</dd>
                            <dt class="col-sm-6">Impuestos (13%):</dt>
                            <dd class="col-sm-6" id="impuestos">0</dd>
                            <dt class="col-sm-6">Total a Pagar:</dt>
                            <dd class="col-sm-6" id="precioTotal">0</dd>
                            <dt class="col-sm-6">Total en Dólares:</dt>
                            <dd class="col-sm-6" id="precioTotalDolares">$0.00</dd>
                        </dl>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>




        <style>
    #resumenReservaContainer {
        position: sticky;
        top: 10px;
        max-height: 100vh;
        overflow-y: auto;
    }
</style>




@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");

    }



    <script>
        document.getElementById('confirmarPagoButton').addEventListener('click', function (event) {
            if (this.id === "pagoTarjeta") {
                event.preventDefault();

                document.querySelectorAll('.form-control').forEach(function(input) {
                    input.classList.remove('is-invalid');
                });

                let isValid = true;

                let numeroTarjeta = document.getElementById('numeroTarjeta').value;
                if (numeroTarjeta.length !== 16 || isNaN(numeroTarjeta)) {
                    isValid = false;
                    document.getElementById('numeroTarjeta').classList.add('is-invalid');
                }

                let cvv = document.getElementById('cvv').value;
                if (cvv.length !== 3 || isNaN(cvv)) {
                    isValid = false;
                    document.getElementById('cvv').classList.add('is-invalid');
                }

                let titularTarjeta = document.getElementById('titularTarjeta').value;
                if (titularTarjeta.length < 10) {
                    isValid = false;
                    document.getElementById('titularTarjeta').classList.add('is-invalid');
                }

                let fechaCaducidad = document.getElementById('fechaCaducidad').value;
                let fechaPattern = /^(0[1-9]|1[0-2])\/\d{4}$/;

                if (!fechaPattern.test(fechaCaducidad)) {
                    isValid = false;
                    document.getElementById('fechaCaducidad').classList.add('is-invalid');
                } else {
                    let fechaParts = fechaCaducidad.split('/');
                    let mes = parseInt(fechaParts[0]);
                    let año = parseInt(fechaParts[1]);
                    let fechaActual = new Date();
                    let fechaSeleccionada = new Date(año, mes - 1);

                    if (fechaSeleccionada < fechaActual) {
                        isValid = false;
                        document.getElementById('fechaCaducidad').classList.add('is-invalid');
                    }
                }

                if (isValid) {
                    Swal.fire({
                        title: "¡Éxito!",
                        text: "Pago procesado correctamente.",
                        icon: "success"
                    }).then(() => {
                        document.querySelector('form').submit();
                    });
                } else {
                    Swal.fire({
                        title: "Error!",
                        text: "Por favor, revisa los campos incorrectos.",
                        icon: "error"
                    });
                }
            }
        });





    </script>


    <script>
        // Convierte un string con formato ₡#,###.## a número
        function obtenerValorNumerico(valorFormateado) {
            if (!valorFormateado) return 0;
            const limpio = valorFormateado.toString()
                .replace(/[₡$\s]/g, '')
                .replace(/\./g, '')
                .replace(',', '.');
            return parseFloat(limpio) || 0;
        }

        // Formatea número a ₡#,###.##
        function formatoCRC(valor) {
            return valor.toLocaleString('es-CR', { style: 'currency', currency: 'CRC' });
        }

        // Función para calcular el pendiente por pagar
        function calcularPendientePago() {
            const totalStr = document.getElementById("totalPagarReserva").value; 
            const montoPagado = parseFloat(document.getElementById("montoPagoMinimo").value) || 0; // Monto pagado
            const total = obtenerValorNumerico(totalStr);

            const pendiente = total - montoPagado; // Calcula el pendiente por pagar
            document.getElementById("pendientePago").value = formatoCRC(pendiente >= 0 ? pendiente : 0); // Muestra el pendiente
        }

        // Asegúrate de que tus funciones devuelvan promesas si son asincrónicas
        async function addHabitaciones() {
            // Aquí puedes poner tu lógica asincrónica real, por ejemplo una llamada a la API
            // Por ejemplo:
            await fetch('/api/habitaciones') // Simulando una llamada a una API
                .then(response => response.json())
                .then(data => {
                    console.log('Habitaciones añadidas', data);
                });
        }

        async function addReservaComplemento() {
            await fetch('/api/complementos') // Llamada simulada
                .then(response => response.json())
                .then(data => {
                    console.log('Reserva complemento añadida', data);
                });
        }

        async function addPasajeros() {
            await fetch('/api/pasajeros') // Llamada simulada
                .then(response => response.json())
                .then(data => {
                    console.log('Pasajeros añadidos', data);
                });
        }

        async function totalesReserva() {
            await fetch('/api/totales') // Llamada simulada
                .then(response => response.json())
                .then(data => {
                    console.log('Totales reservados calculados', data);
                });
        }

        // Al cargar el DOM
        document.addEventListener("DOMContentLoaded", function () {
            const btnMostrar = document.getElementById("mostrar");
            const pagoReserva = document.getElementById("pagoReserva");
            const form = document.querySelector("form");

            
            $("#montoPagoMinimo").on("input", function () {
                this.value = this.value.replace(/[^0-9.]/g, '');
                calcularPendientePago(); 
            });

          
            $("input[name='pagoOpcion']").change(function () {
                const estadoSeleccionado = $(this).data("estado");
                console.log("Estado Sher", estadoSeleccionado);
                $("#estadoPago").val(estadoSeleccionado);

               
                if (this.id === "pagoMinimo") {
                    $("#pagoMinimoCampos").removeClass("d-none");

                    const fechaTexto = $('#fechaFin').text().trim();

                    if(fechaTexto  && fechaTexto !== '-' ){
                        const partes = fechaTexto.split('/');
                        const dia = parseInt(partes[0], 10);
                        const mes = parseInt(partes[1], 10) - 1; 
                        const anio = parseInt(partes[2], 10);

                        const fechaBase = new Date(anio, mes, dia);
                        fechaBase.setDate(fechaBase.getDate() + 10);

                        const fechaLimite = fechaBase.toLocaleDateString('es-CR', {
                            day: '2-digit',
                            month: '2-digit',
                            year: 'numeric'
                        });

                        $('#fechaLimitePago').text(fechaLimite);
                    }
                } else {
                    $("#pagoMinimoCampos").addClass("d-none");
                }

                if (this.id === "pagoTarjeta") {
                    $("#tarjetaCreditoDatos").removeClass("d-none");
                } else {
                    $("#tarjetaCreditoDatos").addClass("d-none");
                }
            });

            // Al hacer click en botón "Confirmar Reserva"
                   btnMostrar.addEventListener("click", async function (event) {
            event.preventDefault();

            // Ejecutar funciones necesarias
            await addHabitaciones();
            await addReservaComplemento();
            await addPasajeros();
            await totalesReserva();

            // Mostrar alerta de éxito
            await Swal.fire({
                icon: 'success',
                title: '¡Reserva registrada!',
                text: 'La reserva se registró correctamente.',
                confirmButtonText: 'Continuar'
            });

            // Ocultar todo el form excepto #pagoReserva
            Array.from(form.children).forEach(child => {
                if (child !== pagoReserva) {
                    child.classList.add("d-none");
                }
            });

            // Mostrar sección de pago
            pagoReserva.classList.remove("d-none");
            pagoReserva.scrollIntoView({ behavior: "smooth" });

            // Mostrar total
            document.getElementById('totalReservaPago').textContent = formatoCRC(totalPagar);
            document.getElementById('totalPagarReserva').value = formatoCRC(totalPagar);

            // Cambiar texto del botón
            btnMostrar.textContent = "Guardando...";
        });

        });
    </script>









    <script>
                   $(document).ready(function () {

            function obtenerValorNumerico(valorFormateado) {
                if (!valorFormateado) return 0;
                const limpio = valorFormateado.toString()
                    .replace(/[₡$\s]/g, '')
                    .replace(/\./g, '')
                    .replace(',', '.');
                return parseFloat(limpio) || 0;
            }

            $("input[name='pagoOpcion']").change(function () {
                const estadoSeleccionado = $(this).data("estado");
                $("#estadoPago").val(estadoSeleccionado);
            });

            $("#montoPagoMinimo").on("input", function () {
                this.value = this.value.replace(/[^0-9.]/g, '');
            });

            $("#btnConfirmarReserva").click(async function (event) {
                event.preventDefault();

                await addHabitaciones();
                await addReservaComplemento();
                await addPasajeros();
                await totalesReserva();

                const radioSeleccionado = $("input[name='pagoOpcion']:checked");

                if (radioSeleccionado.length === 0) {
                    Swal.fire({
                        title: "Advertencia",
                        text: "Debe seleccionar una opción de pago antes de continuar.",
                        icon: "warning"
                    });
                    return;
                }

                const estadoSeleccionado = radioSeleccionado.data("estado");
                $("#estadoPago").val(estadoSeleccionado);

                $(".container-fluid .row > .col-md-8").hide();
                $(".container-fluid .row > .col-md-4").show();
                $(".card").hide();
                $("#resumenReservaContainer, #resumenReserva").show();
                $("#pagoReserva").removeClass("d-none");

                document.getElementById('totalReservaPago').textContent = formatoCRC(totalPagar);
                document.getElementById('totalPagarReserva').value = formatoCRC(totalPagar);

                $(this).text("Guardando...");

                // Mostrar alerta de éxito
                await Swal.fire({
                    icon: 'success',
                    title: '¡Pago realizado con éxito!',
                    text: 'El pago ha sido procesado correctamente.',
                    confirmButtonText: 'Aceptar'
                });
            });
        });


          

    </script>






    <script>
        $(document).ready(function () {

            $('#selectCrucero').change(function () {
                var idCrucero = $(this).val();

            
                $('#cardContainer').empty();
                $('#selectFecha').empty().append('<option value="">Seleccione una fecha</option>');

                if (idCrucero) {
                    $.ajax({
                        url: '/ResumenReservacion/GetFechasXCrucero',
                        type: 'GET',
                        data: { idCrucero: idCrucero },
                        success: function (data) {
                            var selectFecha = $('#selectFecha');
                            $.each(data, function (index, item) {
                                selectFecha.append('<option value="' + item.value + '">' + item.text + '</option>');
                            });
                        }
                    });
                }
            });

  
            $('#selectFecha').change(function () {
                var idFechaCrucero = $(this).val();

                if (idFechaCrucero) {
                   
                    cargarHabitaciones(idFechaCrucero);
                } else {
                    $('#cardContainer').empty();
                }
            });

        });


        $('#selectFecha').change(function () {
            var idCrucero = $(this).val();
            console.log("ID seleccionado: " + idCrucero); 

          
            $('#nombreCrucero').text('-');
            $('#puertoSalida').text('-');
            $('#puertoRegreso').text('-');
            $('#fechaInicio').text('-');
            $('#fechaFin').text('-');

            if (idCrucero) {
                $.ajax({
                    url: '/ResumenReservacion/GetDetalleCrucero',
                    type: 'GET',
                    data: { id: idCrucero },
                    success: function (response) {
                        if (response.success) {
                            const data = response.data;
                            $('#nombreCrucero').text(data.nombre);
                            $('#puertoSalida').text(data.puertoSalida);
                            $('#puertoRegreso').text(data.puertoRegreso);
                            $('#fechaInicio').text(data.fechaInicio);
                            $('#fechaFin').text(data.fechaFin);
                        } else {
                            alert(response.message);
                        }
                    },
                    error: function () {
                        alert('Error al cargar los detalles del crucero.');
                    }
                });
            }
        });







                function cargarHabitaciones(idFechaCrucero) {
            console.log("Llamando a cargarHabitaciones con ID de fecha: " + idFechaCrucero);

            $.ajax({
                url: '/ResumenReservacion/GetPreciosHabitacionesPorFecha',
                type: 'GET',
                data: { idFechaCrucero: idFechaCrucero },
                success: function (data) {
                    console.log("Respuesta del servidor:", data);

                    var selectHabitacion = $('#selectHabitacion');
                    selectHabitacion.empty();

                    selectHabitacion.append('<option value="" disabled selected>Seleccione una habitación</option>');

                    $.each(data, function (index, item) {
                        var precioFormateado = new Intl.NumberFormat('es-CR', { style: 'currency', currency: 'CRC' }).format(item.costo);
                        selectHabitacion.append(`
                            <option
                                value="${item.idHabitacion}"
                                data-nombre="${item.nombreHabitacion}"
                                data-costo="${item.costo}"
                                data-minimo="${item.minimo}"
                                data-maximo="${item.maximo}"
                                data-cantidad="${item.capacidad}">
                                ${item.nombreHabitacion} - ${precioFormateado} (Disponibles: ${item.capacidad})
                            </option>`);
                    });
                },
                error: function (xhr, status, error) {
                    console.error("Error al cargar habitaciones:", error);
                }
            });
        }



         function agregarHabitacion() {
                    var cantidadMaxima = parseInt($('#cantidadHabitaciones').val());
                    var habitacionesAgregadas = $('#cardContainer').children('.col-12').length;

                    if (isNaN(cantidadMaxima) || cantidadMaxima < 1) {
                        Swal.fire({
                            title: "Error",
                            text: "Por favor, indique una cantidad válida de habitaciones a reservar.",
                            icon: "warning"
                        });
                        return;
                    }

                    if (habitacionesAgregadas >= cantidadMaxima) {
                        Swal.fire({
                            title: "Límite alcanzado",
                            text: `Ya ha agregado el máximo de ${cantidadMaxima} habitaciones permitido.`,
                            icon: "info"
                        });
                        return;
                    }

                    var selectHabitacion = $('#selectHabitacion');
                    var habitacionId = selectHabitacion.val();
                    var selectedOption = selectHabitacion.find(':selected');
                    var habitacionNombre = selectedOption.data('nombre');
                    var habitacionCosto = parseFloat(selectedOption.data('costo'));
                    var minimoPasajeros = parseInt(selectedOption.data('minimo'));
                    var maximoPasajeros = parseInt(selectedOption.data('maximo'));

                    // ========== NUEVA VALIDACIÓN (SOLO ESTO SE AGREGA) ========== //
                    var disponibles = parseInt(selectedOption.data('cantidad')) || 0;
                    var habitacionesDelMismoTipo = $(`.card-title:contains('${habitacionId}')`).closest('.col-12').length;

                    if (habitacionesDelMismoTipo >= disponibles) {
                        Swal.fire({
                            title: "No hay disponibilidad",
                            html: `<b>${habitacionNombre}</b><br>
                                  Disponibles: ${disponibles}<br>
                                  Ya agregadas: ${habitacionesDelMismoTipo}`,
                            icon: "warning"
                        });
                        return;
                    }
                    // ========== FIN DE NUEVO CÓDIGO ========== //

                    if (!habitacionId) {
                        Swal.fire({
                            title: "Error!",
                            text: "Debe seleccionar una habitación antes de agregar.",
                            icon: "error"
                        });
                        return;
                    }

                    var cardId = 'habitacion' + Date.now();
                    var precioFormateado = new Intl.NumberFormat('es-CR', { style: 'currency', currency: 'CRC' }).format(habitacionCosto);

                    var cardHtml = `
                        <div class="col-12 mb-3" id="${cardId}">
                            <div class="card h-100 shadow-lg border-0">
                                <div class="card-body">
                                    <h5 class="card-title text-center">${habitacionId}</h5>
                                    <h4 class="card-title text-center">${habitacionNombre}</h4>
                                    <p class="card-text text-center">Precio: ${precioFormateado}</p>
                                    <p class="card-text text-center text-muted">Capacidad: ${minimoPasajeros} - ${maximoPasajeros} pasajeros</p>

                                    <button class="btn btn-sm btn-outline-primary w-100 mt-2" type="button" data-bs-toggle="collapse" data-bs-target="#collapseHabitaciones${cardId}" aria-expanded="false" aria-controls="collapseHabitaciones${cardId}">
                                        <i class="bi bi-caret-down-fill"></i> Mostrar / Ocultar
                                    </button>

                                    <div id="collapseHabitaciones${cardId}" class="collapse mt-2">
                                        <div class="form-group text-center">
                                            <label for="cantidad${cardId}">Cantidad de pasajeros:</label>
                                            <input type="number"
                                                   class="form-control w-50 mx-auto cantidadPasajeros"
                                                   id="cantidad${cardId}"
                                                   min="${minimoPasajeros}"
                                                   max="${maximoPasajeros}"
                                                   value="${minimoPasajeros}"
                                                   onchange="validarCantidadPasajeros('${cardId}', ${minimoPasajeros}, ${maximoPasajeros})"
                                                   oninput="actualizarCantidadPasajeros()">
                                        </div>
                                        <button type="button" class="btn btn-primary mt-2 w-100" onclick="agregarPasajero('${cardId}', '${habitacionNombre}', ${minimoPasajeros}, ${maximoPasajeros})">Agregar Pasajero</button>
                                        <div id="pasajerosContainer${cardId}" class="mt-3"></div>
                                    </div>

                                    <button type="button" class="btn btn-danger mt-2 w-100" onclick="eliminarHabitacion('${cardId}', '${habitacionId}', ${habitacionCosto})">Eliminar habitación</button>
                                </div>
                            </div>
                        </div>`;

                    $('#cardContainer').append(cardHtml);

                    actualizarTotalHabitaciones(habitacionCosto);
                    actualizarCantidadPasajeros();

                    Swal.fire("¡Agregado!", "La habitación ha sido agregada correctamente.", "success");
                }









              function actualizarTotalHabitaciones(nuevoCosto) {
           
            const totalActual = extraerValorMonetario($('#totalHabitaciones').text());

           
            const nuevoTotal = totalActual + extraerValorMonetario(nuevoCosto);

            // Actualizar el texto con formato CRC
            $('#totalHabitaciones').text(formatoCRC(nuevoTotal));

            console.log('Total de habitaciones actualizado localmente a:', formatoCRC(nuevoTotal));

            // Actualizar los totales generales
            actualizarTotales();
        }



                          function eliminarHabitacion(cardId, habitacionId, habitacionCosto) {
           
            const totalPasajeros = $(`[id^="pasajero${habitacionId}_"]`).length;

           
            for (let i = totalPasajeros - 1; i >= 0; i--) {
                eliminarPasajero(habitacionId, i);
            }

          
            $(`#${cardId}`).remove();

          
            const totalActual = extraerValorMonetario($('#totalHabitaciones').text());
            const costoHabitacion = extraerValorMonetario(habitacionCosto);
            $('#totalHabitaciones').text(formatoCRC(totalActual - costoHabitacion));

          
            Swal.fire("¡Habitación eliminada!", "Todos los pasajeros fueron removidos.", "success");
        }



                      function actualizarPasajerosTabla(idHabitacion) {
            const pasajeros = $(`#pasajerosContainer${idHabitacion} .pasajero-nombre`);
            let pasajerosData = [];

            pasajeros.each(function () {
                const nombre = $(this).val().trim();
                if (nombre) {
                    pasajerosData.push({ nombre: nombre, habitacionId: idHabitacion });
                }
            });

            const nombresPasajeros = pasajerosData.length > 0
                ? pasajerosData.map(p => p.nombre).join('<br>')
                : 'Sin pasajeros';

            $(`#pasajerosHabitacion${idHabitacion}`).html(nombresPasajeros);

          
        }




      
       function agregarPasajero(idHabitacion, habitacionNombre, minimo, maximo) {
    const inputCantidad = $(`#cantidad${idHabitacion}`);
    let cantidad = parseInt(inputCantidad.val());
    const contenedor = $(`#pasajerosContainer${idHabitacion}`);
    
    // Validación reforzada
    if (isNaN(cantidad)) {
        cantidad = minimo;
        inputCantidad.val(minimo);
    }
    
    if (cantidad < minimo || cantidad > maximo) {
        Swal.fire({
            title: "Cantidad inválida",
            text: `La habitación "${habitacionNombre}" solo permite entre ${minimo} y ${maximo} pasajeros.`,
            icon: "error"
        });
        
        // Ajustar al valor más cercano permitido
        cantidad = Math.min(Math.max(cantidad, minimo), maximo);
        inputCantidad.val(cantidad);
        return;
    }
    
    contenedor.empty();
    
    // Resto de tu lógica para agregar pasajeros...
    if ($(`#filaHabitacion${idHabitacion}`).length === 0) {
        const filaHtml = `
            <tr id="filaHabitacion${idHabitacion}">
                <td>${habitacionNombre}</td>
                <td id="pasajerosHabitacion${idHabitacion}">Sin pasajeros</td>
            </tr>`;
        $('#tablaHabitaciones').append(filaHtml);
    }

    let filaActual = $('<div class="row g-4"></div>');

             // Generar campos para cada pasajero
            for (let i = 0; i < cantidad; i++) {
                let pasajeroHTML = `
                    <div class="col-md-4 pasajero" id="pasajero${idHabitacion}_${i}">
                        <div class="card border-primary shadow-sm">
                            <div class="card-header bg-info text-white">Pasajero ${i + 1}</div>
                            <div class="card-body">
                                <div class="mb-2">
                                    <input type="text" class="form-control pasajero-nombre"
                                        id="nombrePasajero${idHabitacion}_${i}"
                                        name="Pasajeros[${i}].Nombre"
                                        placeholder="Nombre completo"
                                        required
                                        oninput="actualizarPasajerosTabla('${idHabitacion}')">
                                </div>
                                <div class="mb-2">
                                    <input type="tel" class="form-control"
                                        name="Pasajeros[${i}].Telefono"
                                        placeholder="Teléfono"
                                        required>
                                </div>
                                <div class="mb-2">
                                    <input type="date" class="form-control"
                                        name="Pasajeros[${i}].FechaNacimiento"
                                        placeholder="Fecha de nacimiento"
                                        required>
                                </div>
                                <div class="mb-2">
                                    <input type="email" class="form-control"
                                        name="Pasajeros[${i}].Correo"
                                        placeholder="Correo electrónico"
                                        required>
                                </div>
                                <div class="mb-2">
                                    <input type="text" class="form-control"
                                        name="Pasajeros[${i}].Direccion"
                                        placeholder="Dirección completa"
                                        required>
                                </div>
                                <div class="mb-2">
                                    <select class="form-control"
                                        name="Pasajeros[${i}].Sexo" required>
                                        <option value="">Seleccione género</option>
                                        <option value="Masculino">Masculino</option>
                                        <option value="Femenino">Femenino</option>
                                    </select>
                                </div>
                                <button type="button" class="btn btn-danger btn-sm w-100 mt-2"
                                    onclick="eliminarPasajero('${idHabitacion}', ${i})">
                                    Eliminar
                                </button>
                            </div>
                        </div>
                    </div>`;

                filaActual.append(pasajeroHTML);

               
                if ((i + 1) % 3 === 0 || i === cantidad - 1) {
                    contenedor.append(filaActual);
                    filaActual = $('<div class="row g-4"></div>');
                }
            }

    actualizarPasajerosTabla(idHabitacion);
    actualizarCantidadPasajerosEnComplementos();
}




                function validarCantidadPasajeros(cardId, minimo, maximo) {
            const input = $(`#cantidad${cardId}`);
            let valor = parseInt(input.val());

            if (isNaN(valor)) {  
                input.val(minimo);
                return;
            }

            if (valor < minimo) {
                input.val(minimo);
                Swal.fire({
                    title: "Valor muy bajo",
                    text: `El mínimo de pasajeros para esta habitación es ${minimo}`,
                    icon: "warning"
                });
            } else if (valor > maximo) {
                input.val(maximo);
                Swal.fire({
                    title: "Valor muy alto",
                    text: `El máximo de pasajeros para esta habitación es ${maximo}`,
                    icon: "warning"
                });
            }
        }

        function eliminarPasajero(idHabitacion, index) {
           
            $(`#pasajero${idHabitacion}_${index}`).remove();

            const contenedor = $(`#pasajerosContainer${idHabitacion}`);
            const pasajeros = contenedor.find('.pasajero');

    
            pasajeros.each(function(idx) {
                $(this).attr('id', `pasajero${idHabitacion}_${idx}`);
                $(this).find('.card-header').text(`Pasajero ${idx + 1}`);
                $(this).find('.pasajero-nombre').attr('id', `nombrePasajero${idHabitacion}_${idx}`);
            });

            
            const nuevaCantidad = pasajeros.length;
            $(`#cantidad${idHabitacion}`).val(nuevaCantidad);

           
            if (nuevaCantidad === 0) {
                
                $(`#filaHabitacion${idHabitacion}`).remove();

                
                contenedor.remove();

              
                console.log(`Se eliminó la última habitación ${idHabitacion} porque no tiene pasajeros`);
            }

           
            actualizarPasajerosTabla(idHabitacion);
            actualizarCantidadPasajerosEnComplementos();
        }



    







    


                   
        function extraerValorMonetario(texto) {
            if (!texto) return 0;

           
            let valorLimpio = texto.toString()
                                  .replace(/[^\d,.-]/g, '')  
                                  .replace(/\./g, '')       
                                  .replace(',', '.');        

            return parseFloat(valorLimpio) || 0;
        }

      
        function formatoCRC(monto) {
            const montoNumerico = typeof monto === 'string' ? extraerValorMonetario(monto) : monto;
            return new Intl.NumberFormat('es-CR', {
                style: 'currency',
                currency: 'CRC',
                minimumFractionDigits: 2,
                maximumFractionDigits: 2
            }).format(montoNumerico);
        }

       
        function agregarComplemento() {
            const select = document.getElementById("selectComplemento");
            const complementoSeleccionado = select.options[select.selectedIndex];

            if (!complementoSeleccionado?.value) {
                alert("Seleccione un complemento válido.");
                return;
            }

           
            const id = complementoSeleccionado.value;
            const nombre = complementoSeleccionado.text;
            const detalle = complementoSeleccionado.dataset.detalle || "Sin detalles";
            const precio = extraerValorMonetario(complementoSeleccionado.dataset.precio);
            const precioFormateado = formatoCRC(precio);

           
            const tabla = document.getElementById("tablaComplementos").getElementsByTagName("tbody")[0];
            const tablaDetalle = document.getElementById("detalleComplementos").getElementsByTagName("tbody")[0];

          
            document.getElementById("tablaComplementos").classList.remove("d-none");

       
            const totalPasajeros = obtenerCantidadTotalPasajeros();
            const subtotal = precio * totalPasajeros;
            const subtotalFormateado = formatoCRC(subtotal);

            
            const fila = tabla.insertRow();
            fila.setAttribute("data-id", id);

        
            fila.insertCell(0).textContent = id;
            fila.insertCell(1).textContent = nombre;
            fila.insertCell(2).textContent = detalle;
            fila.insertCell(3).textContent = precioFormateado;

           
            const cantidadCell = fila.insertCell(4);
            const cantidadInput = document.createElement("input");
            cantidadInput.type = "number";
            cantidadInput.value = totalPasajeros;
            cantidadInput.min = 1;
            cantidadInput.readOnly = true;
            cantidadInput.className = "form-control form-control-sm complemento-cantidad";
            cantidadCell.appendChild(cantidadInput);

           
            fila.insertCell(5).textContent = subtotalFormateado;

         
            const accionCell = fila.insertCell(6);
            const btnEliminar = document.createElement("button");
            btnEliminar.type = "button";
            btnEliminar.className = "btn btn-danger btn-sm";
            btnEliminar.textContent = "Eliminar";
            btnEliminar.onclick = () => eliminarFila(fila, id, subtotal);
            accionCell.appendChild(btnEliminar);

            
            const filaDetalle = tablaDetalle.insertRow();
            filaDetalle.setAttribute("data-id", id);
            filaDetalle.insertCell(0).textContent = nombre;
            filaDetalle.insertCell(1).textContent = subtotalFormateado;

       
            select.remove(select.selectedIndex);

          
            actualizarTotalComplementos();
        }

       
        function actualizarSubtotal(fila, precio, id) {
            const cantidad = parseInt(fila.cells[4].querySelector("input").value) || 1;
            const precioNumerico = extraerValorMonetario(precio);
            const subtotal = precioNumerico * cantidad;

            fila.cells[5].textContent = formatoCRC(subtotal);

            const filaDetalle = document.querySelector(`#detalleComplementos tbody tr[data-id="${id}"]`);
            if (filaDetalle) {
                filaDetalle.cells[1].textContent = subtotal.toFixed(2);
            }

            actualizarTotalComplementos();
        }

        // Función para actualizar cantidades cuando cambian los pasajeros
        function actualizarCantidadPasajerosEnComplementos() {
            const totalPasajeros = obtenerCantidadTotalPasajeros();
            const filas = document.querySelectorAll("#tablaComplementos tbody tr");

            filas.forEach(fila => {
                const precioTexto = fila.cells[3].textContent;
                const precio = extraerValorMonetario(precioTexto);
                const id = fila.getAttribute("data-id");

                // Actualizar cantidad
                const cantidadInput = fila.querySelector(".complemento-cantidad");
                cantidadInput.value = totalPasajeros;

                // Actualizar subtotal
                actualizarSubtotal(fila, precio, id);
            });
        }

        // Función para calcular el total de complementos
        function actualizarTotalComplementos() {
            let total = 0;
            const filas = document.querySelectorAll("#tablaComplementos tbody tr");

            filas.forEach(fila => {
                const subtotalText = fila.cells[5].textContent;
                total += extraerValorMonetario(subtotalText);
            });

            document.getElementById('totalComplementos').textContent = formatoCRC(total);
            actualizarTotales();
        }

                function actualizarTotales() {
            const totalHabitaciones = extraerValorMonetario(document.getElementById('totalHabitaciones').textContent);
            const totalComplementos = extraerValorMonetario(document.getElementById('totalComplementos').textContent);

            const subtotal = totalHabitaciones + totalComplementos;
            const impuestos = subtotal * 0.13;
            const totalPagar = subtotal + impuestos;

            // Actualizar valores en colones
            document.getElementById('subtotal').textContent = formatoCRC(subtotal);
            document.getElementById('impuestos').textContent = formatoCRC(impuestos);
            document.getElementById('precioTotal').textContent = formatoCRC(totalPagar);
            document.getElementById('totalReservaPago').textContent = formatoCRC(totalPagar);
            document.getElementById('totalPagarReserva').value = formatoCRC(totalPagar);

            // Calcular y mostrar el total en dólares
            const tipoCambioElement = document.querySelector('.fs-3');
            if (tipoCambioElement) {
                const tipoCambioText = tipoCambioElement.textContent;
                const tipoCambioMatch = tipoCambioText.match(/[\d,.]+/);

                if (tipoCambioMatch) {
                    const tipoCambio = parseFloat(tipoCambioMatch[0].replace(',', '.'));
                    if (tipoCambio && tipoCambio > 0) {
                        const totalDolares = totalPagar / tipoCambio;
                        document.getElementById("precioTotalDolares").textContent = `$${totalDolares.toFixed(2)}`;
                        document.getElementById("totalReservaDolares").textContent = totalDolares.toFixed(2);
                        return;
                    }
                }
            }
            document.getElementById("precioTotalDolares").textContent = "$0.00";
            document.getElementById("totalReservaDolares").textContent = "0.00";
        }

        // Función auxiliar para obtener cantidad de pasajeros
        function obtenerCantidadTotalPasajeros() {
            const inputs = document.querySelectorAll('.cantidadPasajeros');
            let total = 0;
            inputs.forEach(input => {
                total += parseInt(input.value) || 0;
            });
            return total;
        }

        // Función para eliminar una fila (ejemplo)
        function eliminarFila(fila, id, subtotal) {
           
                fila.remove();

                const filaDetalle = document.querySelector(`#detalleComplementos tbody tr[data-id="${id}"]`);
                if (filaDetalle) filaDetalle.remove();

                actualizarTotalComplementos();
            
        }



 


    

        function addReservaComplemento() {
            return new Promise((resolve, reject) => {
                let complementos = [];

               
                let filas = $("#tablaComplementos tbody tr");
                if (filas.length === 0) {
                    Swal.fire({
                        title: "Error!",
                        text: "Debe agregar al menos un complemento antes de continuar.",
                        icon: "error"
                    });
                    return reject("No hay complementos seleccionados.");
                }

            
                filas.each(function (index, fila) {
               
                    let nombreCompleto = $(fila).find("td:eq(0)").text();
                    let cantidad = $(fila).find("input[type='number']").val();


                    let idComplemento = nombreCompleto.split(" - ")[0];

             
                    if (!$.isNumeric(cantidad) || parseInt(cantidad) <= 0) {
                        Swal.fire({
                            title: "Error!",
                            text: `La cantidad del complemento "${nombreCompleto}" debe ser mayor a cero.`,
                            icon: "error"
                        });
                        return reject(`Cantidad inválida para el complemento "${nombreCompleto}".`);
                    }

            
                    if (!idComplemento || isNaN(parseInt(idComplemento))) {
                        Swal.fire({
                            title: "Error!",
                            text: `No se pudo obtener el ID del complemento "${nombreCompleto}".`,
                            icon: "error"
                        });
                        return reject(`ID de complemento no encontrado para "${nombreCompleto}".`);
                    }

                   
                    complementos.push({
                        IdComplemento: encodeURIComponent(idComplemento),  
                        Cantidad: encodeURIComponent(cantidad)
                    });
                });

              
                if (complementos.length === 0) {
                    Swal.fire({
                        title: "Error!",
                        text: "No hay complementos agregados.",
                        icon: "error"
                    });
                    return reject("No hay complementos en la lista.");
                }

                console.log("lokillo", complementos);

            
                let params = complementos.map((complemento, index) =>
                    `complementos[${index}].IdComplemento=${complemento.IdComplemento}&complementos[${index}].Cantidad=${complemento.Cantidad}`
                ).join('&');

               
                let url = `@Url.Action("AddComplemento", "ResumenReservacion")?${params}`;

                // Realizar la petición HTTP
                fetch(url, { method: 'GET' })
                    .then(response => {
                        if (!response.ok) {
                            return response.text().then(text => { throw new Error(text); });
                        }
                        return response.text();
                    })
                    .then(data => {
                        console.log("✅ Complemento guardado correctamente:", data);
                        resolve(data);
                    })
                    .catch(error => {
                        console.error("❌ Error en la petición:", error);
                        Swal.fire({
                            title: "Error!",
                            text: error.message || "Hubo un problema al procesar la solicitud.",
                            icon: "error"
                        });
                        reject(error);
                    });
            });
        }








                      function addPasajeros() {
            return new Promise((resolve, reject) => {
                let pasajeros = [];
                let validationErrors = []; // Array para almacenar errores de validación

                let habitaciones = $("[id^='pasajerosContainer']");

                if (habitaciones.length === 0) {
                    Swal.fire({
                        title: "Error!",
                        text: "Debe agregar al menos un pasajero antes de continuar.",
                        icon: "error"
                    });
                    return reject("No hay pasajeros agregados.");
                }

                // Primero validamos todos los pasajeros
                let allValid = true;
                habitaciones.each(function (index, habitacion) {
                    let idHabitacion = $(habitacion).closest(".card").find(".card-title.text-center").first().text().trim();

                    if (isNaN(parseInt(idHabitacion))) {
                        validationErrors.push("No se pudo obtener el ID de la habitación.");
                        allValid = false;
                        return false; // Continuar con el siguiente elemento
                    }

                    $(habitacion).find(".pasajero").each(function (i, pasajeroDiv) {
                        let nombre = $(pasajeroDiv).find("input.pasajero-nombre").val();
                        let telefono = $(pasajeroDiv).find("input[name*='Telefono']").val();
                        let fechaNacimiento = $(pasajeroDiv).find("input[name*='FechaNacimiento']").val();
                        let correo = $(pasajeroDiv).find("input[name*='Correo']").val();
                        let direccion = $(pasajeroDiv).find("input[name*='Direccion']").val();
                        let sexo = $(pasajeroDiv).find("select[name*='Sexo']").val();

                        // Validaciones
                        if (!nombre || nombre.trim().length <= 5) {
                            validationErrors.push(`El nombre debe tener más de 5 caracteres para el pasajero ${i + 1}.`);
                            allValid = false;
                        }

                        if (!direccion || direccion.trim().length <= 10) {
                            validationErrors.push(`La dirección debe tener más de 10 caracteres para el pasajero ${i + 1}.`);
                            allValid = false;
                        }

                        if (!correo || correo.trim().length <= 20) {
                            validationErrors.push(`El correo debe tener más de 20 caracteres para el pasajero ${i + 1}.`);
                            allValid = false;
                        }

                        if (!fechaNacimiento) {
                            validationErrors.push(`La fecha de nacimiento es obligatoria para el pasajero ${i + 1}.`);
                            allValid = false;
                        } else {
                            // Validar que la fecha no sea mayor a la actual
                            let fechaNac = new Date(fechaNacimiento);
                            let fechaActual = new Date();

                            if (fechaNac > fechaActual) {
                                validationErrors.push(`La fecha de nacimiento no puede ser mayor a la fecha actual para el pasajero ${i + 1}.`);
                                allValid = false;
                            }
                        }

                        if (!sexo) {
                            validationErrors.push(`El sexo es obligatorio para el pasajero ${i + 1}.`);
                            allValid = false;
                        }

                        // Solo agregamos al array si todo es válido
                        if (allValid) {
                            pasajeros.push({
                                Nombre: encodeURIComponent(nombre),
                                Telefono: encodeURIComponent(telefono),
                                FechaNacimiento: encodeURIComponent(fechaNacimiento),
                                Idhabitacion: encodeURIComponent(idHabitacion),
                                Correo: encodeURIComponent(correo),
                                Direccion: encodeURIComponent(direccion),
                                Sexo: encodeURIComponent(sexo)
                            });
                        }
                    });
                });

                // Mostramos todos los errores de validación juntos
                if (validationErrors.length > 0) {
                    Swal.fire({
                        title: "Error de validación!",
                        html: validationErrors.join('<br>'),
                        icon: "error"
                    });
                    return reject("Errores de validación: " + validationErrors.join(', '));
                }

                // Si llegamos aquí, todos los datos son válidos
                console.log("Pasajeros capturados:", pasajeros);

                let params = pasajeros.map((pasajero, index) =>
                    `pasajero[${index}].Nombre=${pasajero.Nombre}&pasajero[${index}].Telefono=${pasajero.Telefono}&pasajero[${index}].FechaNacimiento=${pasajero.FechaNacimiento}&pasajero[${index}].Idhabitacion=${pasajero.Idhabitacion}&pasajero[${index}].Correo=${pasajero.Correo}&pasajero[${index}].Direccion=${pasajero.Direccion}&pasajero[${index}].Sexo=${pasajero.Sexo}`
                ).join('&');

                let url = `@Url.Action("AddPasajero", "ResumenReservacion")?${params}`;

                fetch(url, { method: 'GET' })
                    .then(response => {
                        if (!response.ok) {
                            return response.text().then(text => { throw new Error(text); });
                        }
                        return response.text();
                    })
                    .then(data => {
                        console.log("✅ Pasajero guardado correctamente:", data);
                        resolve(data);
                    })
                    .catch(error => {
                        console.error("❌ Error en la petición:", error);
                        Swal.fire({
                            title: "Error!",
                            text: error.message || "Hubo un problema al procesar la solicitud.",
                            icon: "error"
                        });
                        reject(error);
                    });
            });
        }


        function addHabitaciones() {
            return new Promise((resolve, reject) => {
                let habitacionIds = [];

                // Buscar todas las tarjetas de habitaciones
                let habitaciones = $(".card-title.text-center");

                if (habitaciones.length === 0) {
                    Swal.fire({
                        title: "Error!",
                        text: "Debe haber al menos una habitación seleccionada.",
                        icon: "error"
                    });
                    return reject("No hay habitaciones seleccionadas.");
                }

                // Extraer los IDs de cada habitación
                habitaciones.each(function () {
                    let idHabitacion = $(this).text().trim();

                    if (!isNaN(parseInt(idHabitacion))) {
                        habitacionIds.push(parseInt(idHabitacion));
                    }
                });

                if (habitacionIds.length === 0) {
                    Swal.fire({
                        title: "Error!",
                        text: "No se pudo obtener ningún ID de habitación.",
                        icon: "error"
                    });
                    return reject("IDs de habitaciones inválidos o no encontrados.");
                }

                console.log("IDs de habitaciones:", habitacionIds);

                // Serializar a query string
                let params = habitacionIds.map((id, index) => `habitaciones[${index}]=${id}`).join("&");

                // Ruta al backend
                let url = `@Url.Action("AddHabitaciones", "ResumenReservacion")?${params}`;

                // Enviar con fetch
                fetch(url, { method: "GET" })
                    .then(response => {
                        if (!response.ok) throw new Error("No se pudo guardar las habitaciones.");
                        return response.text();
                    })
                    .then(data => {
                        console.log("✅ Habitaciones guardadas correctamente:", data);
                        resolve(data);
                    })
                    .catch(error => {
                        console.error("❌ Error al guardar habitaciones:", error);
                        Swal.fire({
                            title: "Error!",
                            text: error.message || "Ocurrió un problema al guardar las habitaciones.",
                            icon: "error"
                        });
                        reject(error);
                    });
            });
        }

                   function totalesReserva() {
            return new Promise((resolve, reject) => {
                setTimeout(() => {
                    let habitacionIds = [];
                    let habitaciones = $(".card-title.text-center");

                    if (habitaciones.length === 0) {
                        Swal.fire({
                            title: "Error!",
                            text: "Debe haber al menos una habitación seleccionada.",
                            icon: "error"
                        });
                        return reject("No hay habitaciones seleccionadas.");
                    }

                    // Extraer IDs de habitaciones
                    habitaciones.each(function () {
                        let idHabitacion = $(this).text().trim();
                        if (!isNaN(parseInt(idHabitacion))) {
                            habitacionIds.push(parseInt(idHabitacion));
                        }
                    });

                    if (habitacionIds.length === 0) {
                        Swal.fire({
                            title: "Error!",
                            text: "No se pudo obtener ningún ID de habitación.",
                            icon: "error"
                        });
                        return reject("IDs de habitaciones inválidos o no encontrados.");
                    }

                    let cantidadHabitaciones = habitacionIds.length;

                    let totalHabitaciones = extraerValorMonetario(
                        document.getElementById('totalHabitaciones').textContent
                    );

                    let totalComplementos = extraerValorMonetario(
                        document.getElementById('totalComplementos').textContent
                    );

                    let subtotal = totalHabitaciones + totalComplementos;
                    let impuestos = parseFloat((subtotal * 0.13).toFixed(2));
                    let precioTotal = subtotal + impuestos;

                    const valoresFormateados = {
                        totalHabitaciones: formatoCRC(totalHabitaciones),
                        totalComplementos: formatoCRC(totalComplementos),
                        subtotal: formatoCRC(subtotal),
                        impuestos: formatoCRC(impuestos),
                        precioTotal: formatoCRC(precioTotal)
                    };

                    const valoresNumericos = {
                        totalHabitaciones,
                        totalComplementos,
                        subtotal,
                        impuestos,
                        precioTotal
                    };

                    console.log("Valores numéricos:", valoresNumericos);

                    // Asegurate de que esta línea esté dentro de un bloque Razor o generada por el backend
                    const baseUrl = '@Url.Action("TotalesReserva", "ResumenReservacion")';
                    const url = `${baseUrl}?cantidadHabitaciones=${cantidadHabitaciones}` +
                                `&totalHabitaciones=${valoresNumericos.totalHabitaciones.toFixed(2)}` +
                                `&totalComplementos=${valoresNumericos.totalComplementos.toFixed(2)}` +
                                `&subtotal=${valoresNumericos.subtotal.toFixed(2)}` +
                                `&impuestos=${valoresNumericos.impuestos.toFixed(2)}` +
                                `&precioTotal=${valoresNumericos.precioTotal.toFixed(2)}`;

                    fetch(url, { method: "GET" })
                        .then(response => {
                            if (!response.ok) throw new Error("No se pudieron guardar los totales.");
                            return response.text();
                        })
                        .then(data => {
                            console.log("✅ Totales guardados correctamente:", data);

                            document.getElementById('totalHabitaciones').textContent = valoresFormateados.totalHabitaciones;
                            document.getElementById('totalComplementos').textContent = valoresFormateados.totalComplementos;
                            document.getElementById('subtotal').textContent = valoresFormateados.subtotal;
                            document.getElementById('impuestos').textContent = valoresFormateados.impuestos;
                            document.getElementById('precioTotal').textContent = valoresFormateados.precioTotal;

                            resolve(data);
                        })
                        .catch(error => {
                            console.error("❌ Error al guardar los totales:", error);
                            Swal.fire({
                                title: "Error!",
                                text: error.message || "Ocurrió un problema al guardar los totales.",
                                icon: "error"
                            });
                            reject(error);
                        });
                }, 500);
            });
        }








    </script>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>



}
