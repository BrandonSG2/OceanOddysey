@model OceanOdyssey.Application.DTOs.ResumenReservacionDTO

@{
    ViewData["Title"] = "Create";
}
<div class="container-fluid mt-4">
    <div class="row">
        <!-- Columna Izquierda - Crear Reserva (más ancha) -->
        <div class="col-md-8">
            <form asp-action="Create">
                <!-- Crucero -->
                <div class="card shadow-sm mb-4">
                    <div class="card-header bg-primary text-white">
                        <h4 class="mb-0">Crucero</h4>
                    </div>
                    <div class="card-body">
                        <div class="form-group mb-3">
                            <label asp-for="Idcrucero" class="control-label fw-bold"></label>
                            @Html.DropDownListFor(m => m.Idcrucero,
                                     new SelectList(ViewBag.ListCruceros, "Id", "Nombre"),
                                     new { @class = "form-select", id = "selectCrucero" })
                            <span asp-validation-for="Idcrucero" class="text-danger"></span>
                        </div>
                        <div class="mb-3">
                            <label asp-for="FechaCrucero" class="form-label">Seleccionar Fecha</label>
                            <select asp-for="FechaCrucero" class="form-control" id="selectFecha">
                                <option value="">Seleccione una fecha</option>
                            </select>
                        </div>
                    </div>
                </div>

                <!-- Habitaciones -->
                <div class="card shadow-sm mb-4">
                    <div class="card-header bg-info text-white">
                        <h4 class="mb-0">Habitaciones</h4>
                    </div>
                    <div class="card-body">
                        <div class="row mb-3">
                            <div class="col-8">
                                <select id="selectHabitacion" class="form-select">
                                    <option value="" disabled selected>Cargando habitaciones...</option>
                                </select>
                            </div>
                            <div class="col-4">
                                <button type="button" class="btn btn-primary w-100" onclick="agregarHabitacion()">Agregar</button>
                            </div>
                        </div>
                        <div id="cardContainer" class="d-flex flex-wrap justify-content-center p-3"></div>
                    </div>
                </div>

                <!-- Complementos -->
                <div class="card shadow-sm mb-4">
                    <div class="card-header bg-danger text-white d-flex justify-content-between align-items-center">
                        <h4 class="mb-0">Complementos</h4>
                    </div>
                    <div class="card-body">
                        <div class="d-flex align-items-center">
                            <select id="selectComplemento" class="form-select me-2">
                                <option value="">Seleccione un complemento</option>
                                @foreach (var complemento in ViewBag.ListComplementos)
                                {
                                    <option value="@complemento.Id" data-detalle="@complemento.Detalle" data-precio="@complemento.Precio">
                                        @complemento.Nombre
                                    </option>
                                }
                            </select>
                            <button type="button" class="btn btn-light btn-sm" onclick="agregarComplemento()">Agregar</button>
                        </div>
                        <table class="table table-bordered d-none" id="tablaComplementos">
                            <thead class="table-light">
                                <tr>
                                    <th>ID</th>
                                    <th>Nombre</th>
                                    <th>Detalle</th>
                                    <th>Precio</th>
                                    <th>Cantidad</th>
                                    <th>Subtotal</th>
                                    <th>Acción</th>
                                </tr>
                            </thead>
                            <tbody></tbody>
                        </table>
                    </div>
                </div>

                <!-- Botones de Acción -->
                <div class="text-center">
                    <button type="submit" class="btn btn-primary btn-lg">Confirmar Reserva</button>
                    <a asp-action="Index" class="btn btn-secondary btn-lg">Cancelar</a>
                </div>
            </form>
        </div>

        <!-- Columna Derecha - Resumen de Reserva (más estrecha y sticky) -->
        <div class="col-md-4">
            <div id="resumenReservaContainer" class="card shadow-sm">
                <div class="card-header bg-dark text-white">
                    <h4 class="mb-0">Resumen de Reserva</h4>
                </div>
                <div class="card-body" id="resumenReserva">
                    <!-- Detalle del Crucero -->
                    <div id="detalleCrucero" class="mb-4">
                        <h5 class="text-primary">Detalle del Crucero</h5>
                        <dl class="row">
                            <dt class="col-sm-5">Crucero:</dt>
                            <dd class="col-sm-7" id="nombreCrucero">-</dd>

                            <dt class="col-sm-5">Salida:</dt>
                            <dd class="col-sm-7" id="puertoSalida">-</dd>

                            <dt class="col-sm-5">Regreso:</dt>
                            <dd class="col-sm-7" id="puertoRegreso">-</dd>

                            <dt class="col-sm-5">Inicio:</dt>
                            <dd class="col-sm-7" id="fechaInicio">-</dd>

                            <dt class="col-sm-5">Fin:</dt>
                            <dd class="col-sm-7" id="fechaFin">-</dd>
                        </dl>
                    </div>

                    <!-- Habitaciones y Pasajeros -->
                    <div id="detalleHabitaciones" class="mb-4">
                        <h5 class="text-primary">Habitaciones y Pasajeros</h5>
                        <table class="table table-bordered table-striped">
                            <thead class="table-dark">
                                <tr>
                                    <th>Habitación</th>
                                    <th>Pasajeros</th>
                                </tr>
                            </thead>
                            <tbody id="tablaHabitaciones">
                                <!-- Se llenará dinámicamente -->
                            </tbody>
                        </table>
                    </div>

                    <!-- Complementos -->
                    <div id="detalleComplementos" class="mb-4">
                        <h5 class="text-primary">Complementos</h5>
                        <table class="table table-bordered table-striped">
                            <thead class="table-dark">
                                <tr>
                                    <th>Complemento</th>
                                    <th>Precio Final</th>
                                </tr>
                            </thead>
                            <tbody id="tablaComplementos">
                                <!-- Se llenará dinámicamente -->
                            </tbody>
                        </table>
                    </div>

                    <!-- Totales -->
                    <div id="detalleTotales" class="mb-4">
                        <h5 class="text-primary">Totales</h5>
                        <dl class="row">
                            <dt class="col-sm-6">Total Habitaciones:</dt>
                            <dd class="col-sm-6" id="totalHabitaciones">0</dd>

                            <dt class="col-sm-6">Total Complementos:</dt>
                            <dd class="col-sm-6" id="totalComplementos">0</dd>

                            <dt class="col-sm-6">Subtotal:</dt>
                            <dd class="col-sm-6" id="subtotal">0</dd>

                            <dt class="col-sm-6">Impuestos (13%):</dt>
                            <dd class="col-sm-6" id="impuestos">0</dd>

                            <dt class="col-sm-6">Total a Pagar:</dt>
                            <dd class="col-sm-6" id="precioTotal">0</dd>
                        </dl>
                    </div>
                </div>
            </div>
        </div>



        <style>
    #resumenReservaContainer {
        position: sticky;
        top: 10px;
        max-height: 100vh;
        overflow-y: auto;
    }
</style>




@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");

    }

    <script>
        $(document).ready(function () {

            $('#selectCrucero').change(function () {
                var idCrucero = $(this).val();

            
                $('#cardContainer').empty();
                $('#selectFecha').empty().append('<option value="">Seleccione una fecha</option>');

                if (idCrucero) {
                    $.ajax({
                        url: '/ResumenReservacion/GetFechasXCrucero',
                        type: 'GET',
                        data: { idCrucero: idCrucero },
                        success: function (data) {
                            var selectFecha = $('#selectFecha');
                            $.each(data, function (index, item) {
                                selectFecha.append('<option value="' + item.value + '">' + item.text + '</option>');
                            });
                        }
                    });
                }
            });

  
            $('#selectFecha').change(function () {
                var idFechaCrucero = $(this).val();

                if (idFechaCrucero) {
                   
                    cargarHabitaciones(idFechaCrucero);
                } else {
                    $('#cardContainer').empty();
                }
            });

        });


        $('#selectCrucero').change(function () {
            var idCrucero = $(this).val();
            console.log("ID seleccionado: " + idCrucero); 

          
            $('#nombreCrucero').text('-');
            $('#puertoSalida').text('-');
            $('#puertoRegreso').text('-');
            $('#fechaInicio').text('-');
            $('#fechaFin').text('-');

            if (idCrucero) {
                $.ajax({
                    url: '/ResumenReservacion/GetDetalleCrucero',
                    type: 'GET',
                    data: { id: idCrucero },
                    success: function (response) {
                        if (response.success) {
                            const data = response.data;
                            $('#nombreCrucero').text(data.nombre);
                            $('#puertoSalida').text(data.puertoSalida);
                            $('#puertoRegreso').text(data.puertoRegreso);
                            $('#fechaInicio').text(data.fechaInicio);
                            $('#fechaFin').text(data.fechaFin);
                        } else {
                            alert(response.message);
                        }
                    },
                    error: function () {
                        alert('Error al cargar los detalles del crucero.');
                    }
                });
            }
        });






        //Cargar habitaciones segun la fecha de mi crucero
        function cargarHabitaciones(idFechaCrucero) {
            console.log("Llamando a cargarHabitaciones con ID de fecha: " + idFechaCrucero);

            $.ajax({
                url: '/ResumenReservacion/GetPreciosHabitacionesPorFecha',
                type: 'GET',
                data: { idFechaCrucero: idFechaCrucero },
                success: function (data) {
                    console.log("Respuesta del servidor:", data);

                    var selectHabitacion = $('#selectHabitacion');
                    selectHabitacion.empty();

                  
                    selectHabitacion.append('<option value="" disabled selected>Seleccione una habitación</option>');

                
                    $.each(data, function (index, item) {
                                var precioFormateado = new Intl.NumberFormat('es-CR', { style: 'currency', currency: 'CRC' }).format(item.costo);
                                selectHabitacion.append(`<option value="${item.idHabitacion}" data-nombre="${item.nombreHabitacion}" data-costo="${item.costo}">${item.nombreHabitacion} - ${precioFormateado}</option>`);
                    });
                },
                error: function (xhr, status, error) {
                    console.error("Error al cargar habitaciones:", error);
                }
            });
        }


        //Genera las card dinamicamente donde vera las habitaciones y agregara pasajeros
        function agregarHabitacion() {
            var selectHabitacion = $('#selectHabitacion');
            var habitacionId = selectHabitacion.val();
            var habitacionNombre = selectHabitacion.find(':selected').data('nombre');
            var habitacionCosto = parseFloat(selectHabitacion.find(':selected').data('costo'));

            if (!habitacionId) {
                Swal.fire({
                    title: "Error!",
                    text: "Debe seleccionar una habitación antes de agregar.",
                    icon: "error"
                });
                return;
            }

            var cardId = 'habitacion' + Date.now();
                    var precioFormateado = new Intl.NumberFormat('es-CR', { style: 'currency', currency: 'CRC' }).format(habitacionCosto);
            var cardHtml = `
                <div class="col-12 mb-3" id="${cardId}">
                    <div class="card h-100 shadow-lg border-0">
                        <div class="card-body">
                            <h5 class="card-title text-center">${habitacionId}</h5>
                            <h4 class="card-title text-center">${habitacionNombre}</h4>
                                            <p class="card-text text-center">Precio: ${precioFormateado}</p>
                            <div class="form-group text-center">
                                <label for="cantidad${cardId}">Cantidad de pasajeros:</label>
                                <input type="number" class="form-control w-50 mx-auto" id="cantidad${cardId}" min="1" max="10" value="1">
                            </div>
                            <button type="button" class="btn btn-primary mt-2 w-100" onclick="agregarPasajero('${cardId}', '${habitacionNombre}')">Agregar Pasajero</button>
                            <div id="pasajerosContainer${cardId}" class="mt-3"></div>
                            <button type="button" class="btn btn-danger mt-2 w-100" onclick="eliminarHabitacion('${cardId}', '${habitacionId}', ${habitacionCosto})">Eliminar habitación</button>
                        </div>
                    </div>
                </div>`;

            $('#cardContainer').append(cardHtml);

          
            actualizarTotalHabitaciones(habitacionCosto);

            Swal.fire("¡Agregado!", "La habitación ha sido agregada correctamente.", "success");
        }


        
        function actualizarTotalHabitaciones(nuevoCosto) {
            var totalHabitaciones = parseFloat($('#totalHabitaciones').text()) || 0;
            totalHabitaciones += nuevoCosto;
            $('#totalHabitaciones').text(totalHabitaciones.toFixed(2));

            
            $.ajax({
                url: '/Reservas/ActualizarTotalHabitaciones',
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ total: totalHabitaciones }),
                success: function (response) {
                    console.log('Total de habitaciones actualizado correctamente:', response.message);
                },
                error: function (xhr, status, error) {
                    console.error('Error al actualizar el total de habitaciones:', error);
                }
            });
        }



        // Elimina una habitación
        function eliminarHabitacion(cardId, habitacionId, habitacionCosto) {
           
            $('#' + cardId).remove();

            // Actualizar el total de habitaciones localmente
            var totalHabitaciones = parseFloat($('#totalHabitaciones').text()) || 0;
            totalHabitaciones -= habitacionCosto;
            $('#totalHabitaciones').text(totalHabitaciones.toFixed(2));

            // Eliminar la fila de la tabla de habitaciones
            $('#tablaHabitaciones tr[data-id="' + habitacionId + '"]').remove();

            // Actualizar el total en el servidor mediante AJAX
            $.ajax({
                url: '/Reservas/ActualizarTotalHabitaciones',
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ total: totalHabitaciones }),
                success: function (response) {
                    console.log('Total de habitaciones actualizado correctamente tras eliminación:', response.message);
                },
                error: function (xhr, status, error) {
                    console.error('Error al actualizar el total de habitaciones tras eliminación:', error);
                }
            });

            Swal.fire("¡Eliminado!", "La habitación ha sido eliminada correctamente.", "success");
        }




                function actualizarPasajerosTabla(idHabitacion) {
                    const pasajeros = $(`#pasajerosContainer${idHabitacion} .pasajero-nombre`);
                    let pasajerosData = [];

                    pasajeros.each(function () {
                        const nombre = $(this).val().trim();
                        if (nombre) {
                            pasajerosData.push({ nombre: nombre, habitacionId: idHabitacion });
                        }
                    });

                   
                    const nombresPasajeros = pasajerosData.length > 0
                        ? pasajerosData.map(p => p.nombre).join('<br>')
                        : 'Sin pasajeros';

                    $(`#pasajerosHabitacion${idHabitacion}`).html(nombresPasajeros);

                    // Enviar datos al servidor con AJAX
                    $.ajax({
                        url: '/Reservas/ActualizarPasajeros',
                        method: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify(pasajerosData),
                        success: function (response) {
                            if (response.success) {
                                console.log('Pasajeros actualizados correctamente:', response.message);
                            } else {
                                console.error('Error en la respuesta del servidor:', response.message);
                            }
                        },
                        error: function (xhr, status, error) {
                            console.error('Error al actualizar los pasajeros:', error);
                        }
                    });
                }



        //Agrega los pasajeros a la habitacion dinamicamente y los actualiza en tiempo real en la tabla
        function agregarPasajero(idHabitacion, habitacionNombre) {
            const cantidad = parseInt($(`#cantidad${idHabitacion}`).val());
            const contenedor = $(`#pasajerosContainer${idHabitacion}`);
            contenedor.empty();

           
            if ($(`#filaHabitacion${idHabitacion}`).length === 0) {
                const filaHtml = `
                    <tr id="filaHabitacion${idHabitacion}">
                        <td>${habitacionNombre}</td>
                        <td id="pasajerosHabitacion${idHabitacion}">Sin pasajeros</td>
                    </tr>`;
                $('#tablaHabitaciones').append(filaHtml);
            }

            let filaActual = $('<div class="row g-4"></div>');

            for (let i = 0; i < cantidad; i++) {
                let pasajeroHTML = `
                    <div class="col-md-4 pasajero" id="pasajero${idHabitacion}_${i}">
                        <div class="card border-primary shadow-sm">
                            <div class="card-header bg-info text-white">Pasajero ${i + 1}</div>
                            <div class="card-body">
                                <div class="mb-2">
                                    <input type="text" class="form-control pasajero-nombre"
                                        id="nombrePasajero${idHabitacion}_${i}"
                                        placeholder="Nombre" required
                                        oninput="actualizarPasajerosTabla('${idHabitacion}')">
                                </div>
                                <div class="mb-2">
                                    <input type="text" class="form-control" name="Pasajeros[${i}].Telefono" placeholder="Teléfono">
                                </div>
                                <div class="mb-2">
                                    <input type="date" class="form-control" name="Pasajeros[${i}].FechaNacimiento" required>
                                </div>
                                <div class="mb-2">
                                    <input type="email" class="form-control" name="Pasajeros[${i}].Correo" placeholder="Correo" required>
                                </div>
                                <div class="mb-2">
                                    <input type="text" class="form-control" name="Pasajeros[${i}].Direccion" placeholder="Dirección" required>
                                </div>
                                <div class="mb-2">
                                    <select class="form-control" name="Pasajeros[${i}].Sexo" required>
                                        <option value="Masculino">Masculino</option>
                                        <option value="Femenino">Femenino</option>
                                        
                                    </select>
                                </div>
                                <button type="button" class="btn btn-danger btn-sm w-100 mt-2"
                                    onclick="eliminarPasajero('${idHabitacion}', ${i})">Eliminar</button>
                            </div>
                        </div>
                    </div>`;

                filaActual.append(pasajeroHTML);

              
                if ((i + 1) % 3 === 0 || i === cantidad - 1) {
                    contenedor.append(filaActual);
                    filaActual = $('<div class="row g-4"></div>');
                }
            }

         
            actualizarPasajerosTabla(idHabitacion);
        }


       
       


        //Elimina al pasajero de la habitacion
        function eliminarPasajero(idHabitacion, index) {
          
            $(`#pasajero${idHabitacion}_${index}`).remove();

      
            const contenedor = $(`#pasajerosContainer${idHabitacion}`);
            const pasajeros = contenedor.find('.pasajero');

            
            pasajeros.each(function (idx) {
                $(this).attr('id', `pasajero${idHabitacion}_${idx}`);
                $(this).find('.card-header').text(`Pasajero ${idx + 1}`);
                $(this).find('.pasajero-nombre').attr('id', `nombrePasajero${idHabitacion}_${idx}`);
            });

         
            actualizarPasajerosTabla(idHabitacion);

           
        }




    </script>







    <script>
        function agregarComplemento() {
            let select = document.getElementById("selectComplemento");
            let complementoSeleccionado = select.options[select.selectedIndex];

            if (!complementoSeleccionado.value) {
                alert("Seleccione un complemento válido.");
                return;
            }

            let id = complementoSeleccionado.value;
            let nombre = complementoSeleccionado.text;
            let detalle = complementoSeleccionado.dataset.detalle || "Sin detalles";
            let precio = parseFloat(complementoSeleccionado.dataset.precio || "0.00");
                    let precioFormateado = new Intl.NumberFormat('es-CR', { style: 'currency', currency: 'CRC' }).format(precio);
            let tabla = document.getElementById("tablaComplementos").getElementsByTagName("tbody")[0];
            document.getElementById("tablaComplementos").classList.remove("d-none");

            let fila = tabla.insertRow();
            fila.setAttribute("data-id", id);

            fila.insertCell(0).textContent = id;
            fila.insertCell(1).textContent = nombre;
            fila.insertCell(2).textContent = detalle;
                    fila.insertCell(3).textContent = precioFormateado;

            let cantidadInput = document.createElement("input");
            cantidadInput.type = "number";
            cantidadInput.value = 1;
            cantidadInput.min = 1;
            cantidadInput.className = "form-control form-control-sm";
            cantidadInput.oninput = function () {
                actualizarSubtotal(fila, precio, id);
            };
            fila.insertCell(4).appendChild(cantidadInput);

            let subtotal = precio;
                    let subtotalFormateado = new Intl.NumberFormat('es-CR', { style: 'currency', currency: 'CRC' }).format(subtotal);
            let subtotalCell = fila.insertCell(5);
                    subtotalCell.textContent = subtotalFormateado;

            fila.insertCell(6).innerHTML = `
                <button type="button" class="btn btn-danger btn-sm" onclick="eliminarFila(this, ${subtotal})">Eliminar</button>
            `;

            select.remove(select.selectedIndex);

       
            let tablaDetalle = document.getElementById("detalleComplementos").getElementsByTagName("tbody")[0];
            let filaDetalle = tablaDetalle.insertRow();
            filaDetalle.setAttribute("data-id", id);
            filaDetalle.insertCell(0).textContent = nombre;
                    filaDetalle.insertCell(1).textContent = subtotalFormateado;

            actualizarTotalComplementos();
        }

        function actualizarSubtotal(fila, precio, id) {
            let cantidad = parseInt(fila.cells[4].querySelector("input").value) || 1;
            let subtotal = precio * cantidad;
                    let subtotalFormateado = new Intl.NumberFormat('es-CR', { style: 'currency', currency: 'CRC' }).format(subtotal);
                    fila.cells[5].textContent = subtotalFormateado;

            let filaDetalle = document.querySelector(`#detalleComplementos tbody tr[data-id="${id}"]`);
            if (filaDetalle) {
                filaDetalle.cells[1].textContent = subtotal.toFixed(2);
            }

        
            actualizarTotalComplementos();
        }

                function actualizarTotalComplementos() {
                    let total = 0;
                    let filas = document.querySelectorAll("#tablaComplementos tbody tr");

                    filas.forEach(fila => {
                        let subtotal = parseFloat(fila.cells[5].textContent) || 0;
                        total += subtotal;
                    });
                    let totalFormateado = new Intl.NumberFormat('es-CR', { style: 'currency', currency: 'CRC' }).format(total);
                    // Actualizar la interfaz con el nuevo total
                    $('#totalComplementos').text(totalFormateado);

                    // Enviar el total al servidor con AJAX
                    $.ajax({
                        url: '/Reservas/ActualizarTotalComplementos',
                        method: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify({ totalComplementos: total }),
                        success: function (response) {
                            if (response.success) {
                                console.log('Total de complementos actualizado correctamente:', response.message);
                            } else {
                                console.error('Error en la respuesta del servidor:', response.message);
                            }
                        },
                        error: function (xhr, status, error) {
                            console.error('Error al actualizar el total de complementos:', error);
                        }
                    });

                    // Llamar a la función que actualiza los totales generales
                    actualizarTotales();
                }


                function actualizarTotales() {
                    let totalHabitaciones = parseFloat($('#totalHabitaciones').text()) || 0;
                    let totalComplementos = parseFloat($('#totalComplementos').text()) || 0;

                    let subtotal = totalHabitaciones + totalComplementos;
                    let impuestos = subtotal * 0.13;
                    let precioTotal = subtotal + impuestos;
                    let subtotalFormateado = new Intl.NumberFormat('es-CR', { style: 'currency', currency: 'CRC' }).format(subtotal);
                    let impuestosFormateado = new Intl.NumberFormat('es-CR', { style: 'currency', currency: 'CRC' }).format(impuestos);
                    let precioTotalFormateado = new Intl.NumberFormat('es-CR', { style: 'currency', currency: 'CRC' }).format(precioTotal);
                    // Actualizar la interfaz
                    $('#subtotal').text(subtotalFormateado);
                    $('#impuestos').text(impuestosFormateado);
                    $('#precioTotal').text(precioTotalFormateado);

                    // Enviar los datos al servidor con AJAX
                    $.ajax({
                        url: '/Reservas/ActualizarTotales',
                        method: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify({
                            totalHabitaciones: totalHabitaciones,
                            totalComplementos: totalComplementos,
                            subtotal: subtotal,
                            impuestos: impuestos,
                            precioTotal: precioTotal
                        }),
                        success: function (response) {
                            if (response.success) {
                                console.log('Totales actualizados correctamente:', response.message);
                            } else {
                                console.error('Error en la respuesta del servidor:', response.message);
                            }
                        },
                        error: function (xhr, status, error) {
                            console.error('Error al actualizar los totales:', error);
                        }
                    });
                }


        function eliminarFila(boton, subtotal) {
            let fila = boton.closest("tr");
            let id = fila.cells[0].textContent;
            let nombre = fila.cells[1].textContent;

            let select = document.getElementById("selectComplemento");
            let option = document.createElement("option");
            option.textContent = nombre;
            option.value = id;
            option.setAttribute("data-detalle", fila.cells[2].textContent);
            option.setAttribute("data-precio", fila.cells[3].textContent);
            select.appendChild(option);

        
            fila.remove();

       
            let filaDetalle = document.querySelector(`#detalleComplementos tbody tr[data-id="${id}"]`);
            if (filaDetalle) {
                filaDetalle.remove();
            }

            let tabla = document.getElementById("tablaComplementos");
            if (tabla.getElementsByTagName("tbody")[0].rows.length === 0) {
                tabla.classList.add("d-none");
            }

           
            actualizarTotalComplementos();
        }






    </script>


    <script>

        function addReservaComplemento() {
            return new Promise((resolve, reject) => {
                let complementos = [];

               
                let filas = $("#tablaComplementos tbody tr");
                if (filas.length === 0) {
                    Swal.fire({
                        title: "Error!",
                        text: "Debe agregar al menos un complemento antes de continuar.",
                        icon: "error"
                    });
                    return reject("No hay complementos seleccionados.");
                }

            
                filas.each(function (index, fila) {
               
                    let nombreCompleto = $(fila).find("td:eq(0)").text();
                    let cantidad = $(fila).find("input[type='number']").val();


                    let idComplemento = nombreCompleto.split(" - ")[0];

             
                    if (!$.isNumeric(cantidad) || parseInt(cantidad) <= 0) {
                        Swal.fire({
                            title: "Error!",
                            text: `La cantidad del complemento "${nombreCompleto}" debe ser mayor a cero.`,
                            icon: "error"
                        });
                        return reject(`Cantidad inválida para el complemento "${nombreCompleto}".`);
                    }

            
                    if (!idComplemento || isNaN(parseInt(idComplemento))) {
                        Swal.fire({
                            title: "Error!",
                            text: `No se pudo obtener el ID del complemento "${nombreCompleto}".`,
                            icon: "error"
                        });
                        return reject(`ID de complemento no encontrado para "${nombreCompleto}".`);
                    }

                   
                    complementos.push({
                        IdComplemento: encodeURIComponent(idComplemento),  
                        Cantidad: encodeURIComponent(cantidad)
                    });
                });

              
                if (complementos.length === 0) {
                    Swal.fire({
                        title: "Error!",
                        text: "No hay complementos agregados.",
                        icon: "error"
                    });
                    return reject("No hay complementos en la lista.");
                }

                console.log("lokillo", complementos);

            
                let params = complementos.map((complemento, index) =>
                    `complementos[${index}].IdComplemento=${complemento.IdComplemento}&complementos[${index}].Cantidad=${complemento.Cantidad}`
                ).join('&');

               
                let url = `@Url.Action("AddComplemento", "Reserva")?${params}`;

                // // Realizar la petición HTTP
                // fetch(url, { method: 'GET' })
                //     .then(response => {
                //         if (!response.ok) {
                //             return response.text().then(text => { throw new Error(text); });
                //         }
                //         return response.text();
                //     })
                //     .then(data => {
                //         console.log("✅ Complemento guardado correctamente:", data);
                //         resolve(data);
                //     })
                //     .catch(error => {
                //         console.error("❌ Error en la petición:", error);
                //         Swal.fire({
                //             title: "Error!",
                //             text: error.message || "Hubo un problema al procesar la solicitud.",
                //             icon: "error"
                //         });
                //         reject(error);
                //     });
            });
        }




    </script>


    <script>
        function addPasajeros() {
            return new Promise((resolve, reject) => {
                let pasajeros = [];

               
                let habitaciones = $("[id^='pasajerosContainer']");

                if (habitaciones.length === 0) {
                    Swal.fire({
                        title: "Error!",
                        text: "Debe agregar al menos un pasajero antes de continuar.",
                        icon: "error"
                    });
                    return reject("No hay pasajeros agregados.");
                }

              
                habitaciones.each(function (index, habitacion) {
              
                    let idHabitacion = $(habitacion).closest(".card").find(".card-title.text-center").first().text().trim();

                
                    if (isNaN(parseInt(idHabitacion))) {
                        Swal.fire({
                            title: "Error!",
                            text: `No se pudo obtener el ID de la habitación.`,
                            icon: "error"
                        });
                        return reject("ID de habitación no encontrado.");
                    }

               
                    $(habitacion).find(".pasajero").each(function (i, pasajeroDiv) {
                        let nombre = $(pasajeroDiv).find("input[name*='Nombre']").val();
                        let telefono = $(pasajeroDiv).find("input[name*='Telefono']").val();
                        let fechaNacimiento = $(pasajeroDiv).find("input[name*='FechaNacimiento']").val();
                        let correo = $(pasajeroDiv).find("input[name*='Correo']").val();
                        let direccion = $(pasajeroDiv).find("input[name*='Direccion']").val();
                        let sexo = $(pasajeroDiv).find("select[name*='Sexo']").val();

                
                        if (!nombre || !fechaNacimiento || !correo || !direccion || !sexo) {
                            Swal.fire({
                                title: "Error!",
                                text: `Todos los campos obligatorios deben estar completos para el pasajero ${i + 1}.`,
                                icon: "error"
                            });
                            return reject(`Datos incompletos para el pasajero ${i + 1}.`);
                        }

                
                        pasajeros.push({
                            Nombre: encodeURIComponent(nombre),
                            Telefono: encodeURIComponent(telefono),
                            FechaNacimiento: encodeURIComponent(fechaNacimiento),
                            Idhabitacion: encodeURIComponent(idHabitacion),
                            Correo: encodeURIComponent(correo),
                            Direccion: encodeURIComponent(direccion),
                            Sexo: encodeURIComponent(sexo)
                        });
                    });
                });

              
                if (pasajeros.length === 0) {
                    Swal.fire({
                        title: "Error!",
                        text: "No hay pasajeros agregados.",
                        icon: "error"
                    });
                    return reject("No hay pasajeros en la lista.");
                }

                console.log("Pasajeros capturados:", pasajeros);

         
                let params = pasajeros.map((pasajero, index) =>
                    `pasajero[${index}].Nombre=${pasajero.Nombre}&pasajero[${index}].Telefono=${pasajero.Telefono}&pasajero[${index}].FechaNacimiento=${pasajero.FechaNacimiento}&pasajero[${index}].Idhabitacion=${pasajero.Idhabitacion}&pasajero[${index}].Correo=${pasajero.Correo}&pasajero[${index}].Direccion=${pasajero.Direccion}&pasajero[${index}].Sexo=${pasajero.Sexo}`
                ).join('&');

               
                let url = `@Url.Action("AddPasajero", "Reserva")?${params}`;

                // // Realizar la petición HTTP
                // fetch(url, { method: 'GET' })
                //     .then(response => {
                //         if (!response.ok) {
                //             return response.text().then(text => { throw new Error(text); });
                //         }
                //         return response.text();
                //     })
                //     .then(data => {
                //         console.log("✅ Pasajero guardado correctamente:", data);
                //         resolve(data);
                //     })
                //     .catch(error => {
                //         console.error("❌ Error en la petición:", error);
                //         Swal.fire({
                //             title: "Error!",
                //             text: error.message || "Hubo un problema al procesar la solicitud.",
                //             icon: "error"
                //         });
                //         reject(error);
                //     });
            });
        }


    </script>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>



}
