@model OceanOdyssey.Application.DTOs.CruceroDTO

@{
    ViewData["Title"] = "Crear Crucero";
}

<div class="container mt-4">
    <h2 class="mb-4 text-primary text-center">Crear Nuevo Crucero</h2>
    <hr />
    <div class="row justify-content-center">
        <div class="col-md-8">
            <!-- Aumentamos el ancho aquí -->
            <form asp-action="Create" class="p-5 border rounded shadow-lg bg-light" enctype="multipart/form-data" data-ajax="true"
                  data-ajax-method="POST"
                  data-ajax-begin="onBegin"
                  data-ajax-failure="onFailure"
                  data-ajax-success="onSuccess"
                  data-ajax-complete="onComplete">

                <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                <div class="form-group mb-3">
                    <label asp-for="Nombre" class="control-label fw-bold"></label>
                    <input asp-for="Nombre" class="form-control" placeholder="Ingrese el nombre del crucero" />
                    <span asp-validation-for="Nombre" class="text-danger"></span>
                </div>

                <div class="form-group mb-3">
                    <label asp-for="Idbarco" class="control-label fw-bold"></label>
                    @Html.DropDownListFor(m => m.Idbarco,
                             new SelectList(ViewBag.ListBarco, "id", "Nombre"),
                             new { @class = "form-select", id = "selectBarco" })
                    <span asp-validation-for="Idbarco" class="text-danger"></span>
                </div>

                <div class="form-group mb-3">
                    <label asp-for="Imagen" class="control-label fw-bold"></label>
                    <input type="file" class="form-control" id="ImageFile" name="ImageFile" required />
                    <span asp-validation-for="Imagen" class="text-danger"></span>
                </div>

                <div class="form-group mb-3">
                    <label asp-for="Duracion" class="control-label fw-bold"></label>
                    <input asp-for="Duracion" class="form-control" id="Duracion" placeholder="Ingrese la duración en días" />
                    <span asp-validation-for="Duracion" class="text-danger"></span>
                </div>




                <div class="col">
                    <label asp-for="Itinerario" class="control-label fw-bold"></label>
                    <button type="button" id="generarItinerario" class="btn btn-danger w-100 mb-3">Generar Itinerario</button>
                    <div id="itinerarioContainer" class="mt-3"></div>
                    @*  <div class="mt-4 text-center">
                    <button type="button" class="btn btn-primary w-100" onclick="addItinerario()">Agregar Itinerario a Crucero</button>

                    </div> *@
                </div>









                <div class="col">


                    <button type="button" class="btn btn-warning w-100 mb-3" id="agregarFecha">Agregar Nueva Fecha</button>

               @*      <div class="mt-4 text-center">
                        <button type="button" class="btn btn-primary w-100" onclick="addFechas()">Agregar Fechas a Crucero</button>

                    </div> *@

                    <!-- Contenedor donde se agregarán las fechas y habitaciones -->
                    <div id="fechasContainer"></div>
                </div>





                @*
                <div class="col-md-12">
                <div id="detalleOrdenView">
                @await Html.PartialAsync("_DetailCrucero")
                </div>
                </div> *@

                @*  <button type="button" class="btn btn-success w-100 p-2" data-bs-toggle="modal" data-bs-target="#myModal">Agregar Fecha y Precio Habitación</button> *@
                <button id="crearBtn" type="button" class="btn btn-primary w-100 mt-3 p-2">Crear</button>


            </form>
        </div>
    </div>
</div>



<div class="text-center mt-4">
    <a asp-action="Index" class="btn btn-outline-dark">Volver a la lista</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }


    <script>
        $(document).ready(function () {

            $("#selectBarco").change(function () {
                $("#fechasContainer").empty();

            });


            $("#agregarFecha").click(function () {
                var barcoId = $("#selectBarco").val();

                if (!barcoId) {
                    Swal.fire({
                        title: "Error",
                        text: "Por favor, seleccione un barco antes de agregar una fecha.",
                        icon: "error"
                    });
                    return;
                }

                $.ajax({
                    url: '@Url.Action("GetHabitacionesPorBarco", "Crucero")',
                    type: 'GET',
                    data: { idBarco: barcoId },
                    success: function (habitaciones) {
                        // Obtener correctamente el índice basado en la cantidad de fechas actuales
                        var fechaIndex = $("#fechasContainer .fecha-item").length;

                        var fechaHtml = `
                                <div class="fecha-item border p-4 mb-3 rounded bg-white shadow-sm" data-index="${fechaIndex}">
                                    <h5 class="text-secondary">Fecha ${fechaIndex + 1}</h5>
                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="form-group mb-3">
                                                <label class="fw-bold">Fecha de Inicio</label>
                                                <input type="date" name="FechaInicio${fechaIndex}" class="form-control fecha-inicio" required />
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="form-group mb-3">
                                                <label class="fw-bold">Fecha Límite</label>
                                                <input type="date" name="FechaLimite${fechaIndex}" class="form-control fecha-limite" required />
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row habitaciones-container">
                            `;

                        // Generar tarjetas para cada habitación con su campo de precio
                        $.each(habitaciones, function (index, habitacion) {
                            fechaHtml += `
                                    <div class="col-md-4">
                                        <div class="card p-3 mb-3 shadow">
                                            <h6 class="text-center fw-bold">${habitacion.nombre}</h6>
                                            <input type="number" name="Precio${fechaIndex}_${habitacion.id}" class="form-control precio-habitacion mt-2" placeholder="Ingrese el precio" required />
                                        </div>
                                    </div>
                                `;
                        });

                        fechaHtml += `</div></div>`;

                        $("#fechasContainer").append(fechaHtml);
                        console.log(`Fecha ${fechaIndex + 1} agregada con habitaciones.`);
                    },
                    error: function () {
                        Swal.fire({
                            title: "Error",
                            text: "Error al obtener las habitaciones.",
                            icon: "error"
                        });
                    }
                });
            });


            // Evento para generar el itinerario según la duración ingresada
            $("#generarItinerario").click(function () {
                var duracion = $("#Duracion").val();
                var container = $("#itinerarioContainer");
                container.empty();


                // Validar que la duración sea un número positivo y no contenga letras
                if (!/^\d+$/.test(duracion) || parseInt(duracion) <= 2) {
                    Swal.fire({
                        title: "Error!",
                        text: "Ingrese al menos 2 o más dias para el itineraio !",
                        icon: "error"
                    });
                    return;
                }

                // var buttonAgregar = `
                //     <div class="mt-4 text-center">
                //                                 <button type="button" class="btn btn-primary w-100" onclick="addItinerario()">Agregar Itinerario a Crucero</button>
                //     </div>
                // `;
                // container.append(buttonAgregar);

                for (var i = 1; i <= duracion; i++) {
                    var html = `
                    <div class="border p-4 mt-4 mb-3 rounded bg-white shadow-sm">
                        <h5 class="text-secondary">Día ${i}</h5>
                        <div class="form-group">
                            <label class="fw-bold">Descripción</label>
                            <input type="text" name="itinerarios[${i - 1}].DescripcionDia" class="form-control" placeholder="Ingrese la descripción" required />
                        </div>
                        <div class="form-group mt-2">
                            <label class="fw-bold">Día</label>
                            <input type="number" name="itinerarios[${i - 1}].Dia" class="form-control" placeholder="Ingrese un número" required />
                        </div>
                        <div class="form-group mt-2">
                            <label class="fw-bold">Seleccionar Puerto</label>
                            <select name="itinerarios[${i - 1}].PuertoId" class="form-select" required>
                                        <option value="">Seleccione un puerto</option>
        @foreach (var puerto in ViewBag.ListPuertos)
        {
                                                    <option value="@puerto.Id">@puerto.Nombre</option>
        }
                                    </select>
                                </div>
                            </div>
                            `;
                    container.append(html);
                }






            });

        });


        function addItinerario() {
            return new Promise((resolve, reject) => {
                let duracion = $("#Duracion").val();

                if (!$.isNumeric(duracion) || parseInt(duracion) <= 0) {
                    Swal.fire({
                        title: "Error!",
                        text: "Ingrese una duración válida mayor a cero!",
                        icon: "error"
                    });
                    return reject("Duración inválida");
                }

                let itinerarios = [];

                for (let i = 1; i <= duracion; i++) {
                    let descripcionDia = $(`input[name="itinerarios[${i - 1}].DescripcionDia"]`).val();
                    let dia = $(`input[name="itinerarios[${i - 1}].Dia"]`).val();
                    let puertoId = $(`select[name="itinerarios[${i - 1}].PuertoId"]`).val();

              
                    if (!/^\d+$/.test(dia) || parseInt(dia) <= 0) {
                        Swal.fire({
                            title: "Error!",
                            text: `El campo "Día" en el Día ${i} debe contener solo números positivos.`,
                            icon: "error"
                        });
                        return reject(`Día inválido en el día ${i}`);
                    }

          
                    if (!descripcionDia || descripcionDia.length < 5) {
                        Swal.fire({
                            title: "Error!",
                            text: `La descripción del Día ${i} debe contener al menos 5 caracteres.`,
                            icon: "error"
                        });
                        return reject(`Descripción inválida en el día ${i}`);
                    }

                    
                    if (!puertoId) {
                        Swal.fire({
                            title: "Error!",
                            text: `Debe seleccionar un puerto para el Día ${i}.`,
                            icon: "error"
                        });
                        return reject(`Puerto no seleccionado en el día ${i}`);
                    }

                    itinerarios.push({
                        Descripcion: encodeURIComponent(descripcionDia),
                        Dia: encodeURIComponent(dia),
                        Idpuerto: encodeURIComponent(puertoId)
                    });
                }

               
                if (itinerarios.length < 2) {
                    Swal.fire({
                        title: "Error!",
                        text: "Debe ingresar al menos dos itinerarios antes de continuar.",
                        icon: "error"
                    });
                    return reject("No hay suficientes itinerarios ingresados.");
                }

                let params = itinerarios.map((it, index) =>
                    `itinerarios[${index}].Descripcion=${it.Descripcion}&itinerarios[${index}].Dia=${it.Dia}&itinerarios[${index}].Idpuerto=${it.Idpuerto}`
                ).join('&');

                let url = `@Url.Action("AddItinerario", "Crucero")?${params}`;

                fetch(url, { method: 'GET' })
                    .then(response => {
                        if (!response.ok) {
                            return response.text().then(text => { throw new Error(text); });
                        }
                        return response.text();
                    })
                    .then(data => {
                        console.log("✅ Itinerario guardado correctamente:", data);
                        resolve(data);
                    })
                    .catch(error => {
                        console.error("❌ Error en la petición:", error);
                        Swal.fire({
                            title: "Error!",
                            text: error.message || "Hubo un problema al procesar la solicitud.",
                            icon: "error"
                        });
                        reject(error);
                    });
            });
        }









        function addFechas() {
            return new Promise((resolve, reject) => {
                let fechas = [];
                let fechaIndex = 0;
                let fechasInicioSet = new Set();

                while ($(`input[name="FechaInicio${fechaIndex}"]`).length > 0) {
                    let fechaInicio = $(`input[name="FechaInicio${fechaIndex}"]`).val();
                    let fechaLimite = $(`input[name="FechaLimite${fechaIndex}"]`).val();
                    let habitacionesArray = [];

                    console.log(`Procesando Fecha ${fechaIndex + 1}: Inicio: ${fechaInicio}, Límite: ${fechaLimite}`);

                   
                    if (!fechaInicio || !fechaLimite) {
                        Swal.fire({
                            title: "Error!",
                            text: `Por favor complete las fechas para el bloque ${fechaIndex + 1}`,
                            icon: "error"
                        });
                        reject("❌ Error: Fechas incompletas.");
                        return;
                    }

                    
                    if (new Date(fechaLimite) <= new Date(fechaInicio)) {
                        Swal.fire({
                            title: "Error!",
                            text: `La Fecha Límite en el bloque ${fechaIndex + 1} debe ser mayor a la Fecha de Inicio.`,
                            icon: "error"
                        });
                        reject("❌ Error: Fecha Límite menor o igual a Fecha Inicio.");
                        return;
                    }

               
                    if (fechasInicioSet.has(fechaInicio)) {
                        Swal.fire({
                            title: "Error!",
                            text: `Ya existe una entrada con la misma Fecha de Inicio (${fechaInicio}).`,
                            icon: "error"
                        });
                        reject("❌ Error: Fecha de Inicio duplicada.");
                        return;
                    }
                    fechasInicioSet.add(fechaInicio);

                    let errorEncontrado = false;

                    $(`input[name^="Precio${fechaIndex}_"]`).each(function () {
                        let habitacionId = $(this).attr('name').split('_')[1];
                        let precio = $(this).val();

                        console.log(`Habitación ${habitacionId}: Precio ingresado: ${precio}`);

                    
                        if (!/^\d+$/.test(precio) || parseInt(precio) <= 0) {
                            Swal.fire({
                                title: "Error!",
                                text: `El precio de la habitación ${habitacionId} en la Fecha ${fechaIndex + 1} debe ser un número entero positivo.`,
                                icon: "error"
                            });
                            errorEncontrado = true;
                            return false;
                        }

                        habitacionesArray.push({
                            IdHabitacion: parseInt(habitacionId),
                            Costo: parseInt(precio)
                        });
                    });

                    if (errorEncontrado) {
                        reject("❌ Error: Precio inválido en alguna habitación.");
                        return;
                    }

                    fechas.push({
                        FechaInicio: fechaInicio,
                        FechaLimite: fechaLimite,
                        PrecioHabitacion: habitacionesArray
                    });

                    fechaIndex++;
                }


                if (fechas.length === 0) {
                    Swal.fire({
                        title: "Error",
                        text: "Debe ingresar al menos una fecha antes de continuar.",
                        icon: "error"
                    });
                    reject("❌ Error: No hay fechas ingresadas.");
                    return;
                }

                console.log("✅ Fechas recopiladas:", fechas);

                let fechasParams = fechas.map((fecha, index) => {
                    let habitacionesParams = fecha.PrecioHabitacion.map((habitacion, hIndex) =>
                        `fechas[${index}].PrecioHabitacion[${hIndex}].IdHabitacion=${habitacion.IdHabitacion}&fechas[${index}].PrecioHabitacion[${hIndex}].Costo=${habitacion.Costo}`
                    ).join('&');

                    return `fechas[${index}].FechaInicio=${encodeURIComponent(fecha.FechaInicio)}&fechas[${index}].FechaLimite=${encodeURIComponent(fecha.FechaLimite)}&${habitacionesParams}`;
                }).join('&');

                const myRequest = `@Url.Action("AddFechas", "Crucero")?${fechasParams}`;

                fetch(myRequest, { method: 'GET' })
                    .then(response => {
                        if (!response.ok) {
                            return response.text().then(text => { throw new Error(text); });
                        }
                        return response.text();
                    })
                    .then(() => {
                       
                        resolve();  
                    })
                    .catch(error => {
                        console.error("❌ Error en la petición:", error);
                        Swal.fire({
                            title: "Error",
                            text: error.message || "Hubo un problema al procesar la solicitud.",
                            icon: "error"
                        });
                        reject(error.message || "❌ Error en la solicitud.");
                    });
            });
        }





        document.getElementById("crearBtn").addEventListener("click", async function () {
            try {
                var nombre = document.getElementById("Nombre").value.trim();
                var imagenInput = document.getElementById("ImageFile");
                var imagen = imagenInput.files[0];

            
                if (nombre.length < 5) {
                    Swal.fire({
                        title: "Error!",
                        text: "El nombre debe tener al menos 5 caracteres.",
                        icon: "error"
                    });
                    return;
                }

          
                if (!imagen) {
                    Swal.fire({
                        title: "Error!",
                        text: "Debe seleccionar una imagen.",
                        icon: "error"
                    });
                    return;
                }

                
                await addItinerario();
                await addFechas();

               
                Swal.fire({
                    title: "¡Éxito!",
                    text: "Crucero agregado correctamente.",
                    icon: "success",
                    confirmButtonText: "OK"
                }).then(() => {
                    console.log("🚀 Enviando formulario...");
                    document.querySelector("form").submit();
                });

            } catch (error) {
                console.error("❌ Error en el proceso:", error);
            }
        });
















    </script>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>



}
